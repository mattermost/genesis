// Code generated by MockGen. DO NOT EDIT.
// Source: ../../aws/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	credentials "github.com/aws/aws-sdk-go/aws/credentials"
	iam "github.com/aws/aws-sdk-go/service/iam"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAWS is a mock of AWS interface
type MockAWS struct {
	ctrl     *gomock.Controller
	recorder *MockAWSMockRecorder
}

// MockAWSMockRecorder is the mock recorder for MockAWS
type MockAWSMockRecorder struct {
	mock *MockAWS
}

// NewMockAWS creates a new mock instance
func NewMockAWS(ctrl *gomock.Controller) *MockAWS {
	mock := &MockAWS{ctrl: ctrl}
	mock.recorder = &MockAWSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWS) EXPECT() *MockAWSMockRecorder {
	return m.recorder
}

// GetAccountAliases mocks base method
func (m *MockAWS) GetAccountAliases() (*iam.ListAccountAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAliases")
	ret0, _ := ret[0].(*iam.ListAccountAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAliases indicates an expected call of GetAccountAliases
func (mr *MockAWSMockRecorder) GetAccountAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAliases", reflect.TypeOf((*MockAWS)(nil).GetAccountAliases))
}

// GetCloudEnvironmentName mocks base method
func (m *MockAWS) GetCloudEnvironmentName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudEnvironmentName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudEnvironmentName indicates an expected call of GetCloudEnvironmentName
func (mr *MockAWSMockRecorder) GetCloudEnvironmentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudEnvironmentName", reflect.TypeOf((*MockAWS)(nil).GetCloudEnvironmentName))
}

// AssumeRole mocks base method
func (m *MockAWS) AssumeRole(roleArn string) (*credentials.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", roleArn)
	ret0, _ := ret[0].(*credentials.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole
func (mr *MockAWSMockRecorder) AssumeRole(roleArn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAWS)(nil).AssumeRole), roleArn)
}

// GetAccountID mocks base method
func (m *MockAWS) GetAccountID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountID indicates an expected call of GetAccountID
func (mr *MockAWSMockRecorder) GetAccountID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountID", reflect.TypeOf((*MockAWS)(nil).GetAccountID))
}

// AssociateTGWShare mocks base method
func (m *MockAWS) AssociateTGWShare(resourceShareARN, principalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTGWShare", resourceShareARN, principalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateTGWShare indicates an expected call of AssociateTGWShare
func (mr *MockAWSMockRecorder) AssociateTGWShare(resourceShareARN, principalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTGWShare", reflect.TypeOf((*MockAWS)(nil).AssociateTGWShare), resourceShareARN, principalID)
}

// DisassociateTGWShare mocks base method
func (m *MockAWS) DisassociateTGWShare(resourceShareARN, principalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTGWShare", resourceShareARN, principalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisassociateTGWShare indicates an expected call of DisassociateTGWShare
func (mr *MockAWSMockRecorder) DisassociateTGWShare(resourceShareARN, principalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTGWShare", reflect.TypeOf((*MockAWS)(nil).DisassociateTGWShare), resourceShareARN, principalID)
}
