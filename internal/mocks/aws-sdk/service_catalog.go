// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/servicecatalog/servicecatalogiface (interfaces: ServiceCatalogAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	servicecatalog "github.com/aws/aws-sdk-go/service/servicecatalog"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceCatalogAPI is a mock of ServiceCatalogAPI interface
type MockServiceCatalogAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceCatalogAPIMockRecorder
}

// MockServiceCatalogAPIMockRecorder is the mock recorder for MockServiceCatalogAPI
type MockServiceCatalogAPIMockRecorder struct {
	mock *MockServiceCatalogAPI
}

// NewMockServiceCatalogAPI creates a new mock instance
func NewMockServiceCatalogAPI(ctrl *gomock.Controller) *MockServiceCatalogAPI {
	mock := &MockServiceCatalogAPI{ctrl: ctrl}
	mock.recorder = &MockServiceCatalogAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceCatalogAPI) EXPECT() *MockServiceCatalogAPIMockRecorder {
	return m.recorder
}

// AcceptPortfolioShare mocks base method
func (m *MockServiceCatalogAPI) AcceptPortfolioShare(arg0 *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPortfolioShare", arg0)
	ret0, _ := ret[0].(*servicecatalog.AcceptPortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPortfolioShare indicates an expected call of AcceptPortfolioShare
func (mr *MockServiceCatalogAPIMockRecorder) AcceptPortfolioShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPortfolioShare", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AcceptPortfolioShare), arg0)
}

// AcceptPortfolioShareRequest mocks base method
func (m *MockServiceCatalogAPI) AcceptPortfolioShareRequest(arg0 *servicecatalog.AcceptPortfolioShareInput) (*request.Request, *servicecatalog.AcceptPortfolioShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPortfolioShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AcceptPortfolioShareOutput)
	return ret0, ret1
}

// AcceptPortfolioShareRequest indicates an expected call of AcceptPortfolioShareRequest
func (mr *MockServiceCatalogAPIMockRecorder) AcceptPortfolioShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPortfolioShareRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AcceptPortfolioShareRequest), arg0)
}

// AcceptPortfolioShareWithContext mocks base method
func (m *MockServiceCatalogAPI) AcceptPortfolioShareWithContext(arg0 context.Context, arg1 *servicecatalog.AcceptPortfolioShareInput, arg2 ...request.Option) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptPortfolioShareWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AcceptPortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPortfolioShareWithContext indicates an expected call of AcceptPortfolioShareWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AcceptPortfolioShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPortfolioShareWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AcceptPortfolioShareWithContext), varargs...)
}

// AssociateBudgetWithResource mocks base method
func (m *MockServiceCatalogAPI) AssociateBudgetWithResource(arg0 *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateBudgetWithResource", arg0)
	ret0, _ := ret[0].(*servicecatalog.AssociateBudgetWithResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateBudgetWithResource indicates an expected call of AssociateBudgetWithResource
func (mr *MockServiceCatalogAPIMockRecorder) AssociateBudgetWithResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateBudgetWithResource", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateBudgetWithResource), arg0)
}

// AssociateBudgetWithResourceRequest mocks base method
func (m *MockServiceCatalogAPI) AssociateBudgetWithResourceRequest(arg0 *servicecatalog.AssociateBudgetWithResourceInput) (*request.Request, *servicecatalog.AssociateBudgetWithResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateBudgetWithResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AssociateBudgetWithResourceOutput)
	return ret0, ret1
}

// AssociateBudgetWithResourceRequest indicates an expected call of AssociateBudgetWithResourceRequest
func (mr *MockServiceCatalogAPIMockRecorder) AssociateBudgetWithResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateBudgetWithResourceRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateBudgetWithResourceRequest), arg0)
}

// AssociateBudgetWithResourceWithContext mocks base method
func (m *MockServiceCatalogAPI) AssociateBudgetWithResourceWithContext(arg0 context.Context, arg1 *servicecatalog.AssociateBudgetWithResourceInput, arg2 ...request.Option) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateBudgetWithResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AssociateBudgetWithResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateBudgetWithResourceWithContext indicates an expected call of AssociateBudgetWithResourceWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AssociateBudgetWithResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateBudgetWithResourceWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateBudgetWithResourceWithContext), varargs...)
}

// AssociatePrincipalWithPortfolio mocks base method
func (m *MockServiceCatalogAPI) AssociatePrincipalWithPortfolio(arg0 *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePrincipalWithPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePrincipalWithPortfolio indicates an expected call of AssociatePrincipalWithPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) AssociatePrincipalWithPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePrincipalWithPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociatePrincipalWithPortfolio), arg0)
}

// AssociatePrincipalWithPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) AssociatePrincipalWithPortfolioRequest(arg0 *servicecatalog.AssociatePrincipalWithPortfolioInput) (*request.Request, *servicecatalog.AssociatePrincipalWithPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePrincipalWithPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	return ret0, ret1
}

// AssociatePrincipalWithPortfolioRequest indicates an expected call of AssociatePrincipalWithPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) AssociatePrincipalWithPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePrincipalWithPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociatePrincipalWithPortfolioRequest), arg0)
}

// AssociatePrincipalWithPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) AssociatePrincipalWithPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.AssociatePrincipalWithPortfolioInput, arg2 ...request.Option) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePrincipalWithPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePrincipalWithPortfolioWithContext indicates an expected call of AssociatePrincipalWithPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AssociatePrincipalWithPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePrincipalWithPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociatePrincipalWithPortfolioWithContext), varargs...)
}

// AssociateProductWithPortfolio mocks base method
func (m *MockServiceCatalogAPI) AssociateProductWithPortfolio(arg0 *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProductWithPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.AssociateProductWithPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProductWithPortfolio indicates an expected call of AssociateProductWithPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) AssociateProductWithPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProductWithPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateProductWithPortfolio), arg0)
}

// AssociateProductWithPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) AssociateProductWithPortfolioRequest(arg0 *servicecatalog.AssociateProductWithPortfolioInput) (*request.Request, *servicecatalog.AssociateProductWithPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProductWithPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AssociateProductWithPortfolioOutput)
	return ret0, ret1
}

// AssociateProductWithPortfolioRequest indicates an expected call of AssociateProductWithPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) AssociateProductWithPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProductWithPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateProductWithPortfolioRequest), arg0)
}

// AssociateProductWithPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) AssociateProductWithPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.AssociateProductWithPortfolioInput, arg2 ...request.Option) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateProductWithPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AssociateProductWithPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProductWithPortfolioWithContext indicates an expected call of AssociateProductWithPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AssociateProductWithPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProductWithPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateProductWithPortfolioWithContext), varargs...)
}

// AssociateServiceActionWithProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) AssociateServiceActionWithProvisioningArtifact(arg0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateServiceActionWithProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateServiceActionWithProvisioningArtifact indicates an expected call of AssociateServiceActionWithProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) AssociateServiceActionWithProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateServiceActionWithProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateServiceActionWithProvisioningArtifact), arg0)
}

// AssociateServiceActionWithProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) AssociateServiceActionWithProvisioningArtifactRequest(arg0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*request.Request, *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateServiceActionWithProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	return ret0, ret1
}

// AssociateServiceActionWithProvisioningArtifactRequest indicates an expected call of AssociateServiceActionWithProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) AssociateServiceActionWithProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateServiceActionWithProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateServiceActionWithProvisioningArtifactRequest), arg0)
}

// AssociateServiceActionWithProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) AssociateServiceActionWithProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateServiceActionWithProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateServiceActionWithProvisioningArtifactWithContext indicates an expected call of AssociateServiceActionWithProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AssociateServiceActionWithProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateServiceActionWithProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateServiceActionWithProvisioningArtifactWithContext), varargs...)
}

// AssociateTagOptionWithResource mocks base method
func (m *MockServiceCatalogAPI) AssociateTagOptionWithResource(arg0 *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTagOptionWithResource", arg0)
	ret0, _ := ret[0].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTagOptionWithResource indicates an expected call of AssociateTagOptionWithResource
func (mr *MockServiceCatalogAPIMockRecorder) AssociateTagOptionWithResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTagOptionWithResource", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateTagOptionWithResource), arg0)
}

// AssociateTagOptionWithResourceRequest mocks base method
func (m *MockServiceCatalogAPI) AssociateTagOptionWithResourceRequest(arg0 *servicecatalog.AssociateTagOptionWithResourceInput) (*request.Request, *servicecatalog.AssociateTagOptionWithResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTagOptionWithResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	return ret0, ret1
}

// AssociateTagOptionWithResourceRequest indicates an expected call of AssociateTagOptionWithResourceRequest
func (mr *MockServiceCatalogAPIMockRecorder) AssociateTagOptionWithResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTagOptionWithResourceRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateTagOptionWithResourceRequest), arg0)
}

// AssociateTagOptionWithResourceWithContext mocks base method
func (m *MockServiceCatalogAPI) AssociateTagOptionWithResourceWithContext(arg0 context.Context, arg1 *servicecatalog.AssociateTagOptionWithResourceInput, arg2 ...request.Option) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateTagOptionWithResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTagOptionWithResourceWithContext indicates an expected call of AssociateTagOptionWithResourceWithContext
func (mr *MockServiceCatalogAPIMockRecorder) AssociateTagOptionWithResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTagOptionWithResourceWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).AssociateTagOptionWithResourceWithContext), varargs...)
}

// BatchAssociateServiceActionWithProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) BatchAssociateServiceActionWithProvisioningArtifact(arg0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateServiceActionWithProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateServiceActionWithProvisioningArtifact indicates an expected call of BatchAssociateServiceActionWithProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) BatchAssociateServiceActionWithProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateServiceActionWithProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchAssociateServiceActionWithProvisioningArtifact), arg0)
}

// BatchAssociateServiceActionWithProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) BatchAssociateServiceActionWithProvisioningArtifactRequest(arg0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*request.Request, *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateServiceActionWithProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	return ret0, ret1
}

// BatchAssociateServiceActionWithProvisioningArtifactRequest indicates an expected call of BatchAssociateServiceActionWithProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) BatchAssociateServiceActionWithProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateServiceActionWithProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchAssociateServiceActionWithProvisioningArtifactRequest), arg0)
}

// BatchAssociateServiceActionWithProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) BatchAssociateServiceActionWithProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateServiceActionWithProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateServiceActionWithProvisioningArtifactWithContext indicates an expected call of BatchAssociateServiceActionWithProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) BatchAssociateServiceActionWithProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateServiceActionWithProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchAssociateServiceActionWithProvisioningArtifactWithContext), varargs...)
}

// BatchDisassociateServiceActionFromProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) BatchDisassociateServiceActionFromProvisioningArtifact(arg0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateServiceActionFromProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateServiceActionFromProvisioningArtifact indicates an expected call of BatchDisassociateServiceActionFromProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) BatchDisassociateServiceActionFromProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateServiceActionFromProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchDisassociateServiceActionFromProvisioningArtifact), arg0)
}

// BatchDisassociateServiceActionFromProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) BatchDisassociateServiceActionFromProvisioningArtifactRequest(arg0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*request.Request, *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateServiceActionFromProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	return ret0, ret1
}

// BatchDisassociateServiceActionFromProvisioningArtifactRequest indicates an expected call of BatchDisassociateServiceActionFromProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) BatchDisassociateServiceActionFromProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateServiceActionFromProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchDisassociateServiceActionFromProvisioningArtifactRequest), arg0)
}

// BatchDisassociateServiceActionFromProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) BatchDisassociateServiceActionFromProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateServiceActionFromProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateServiceActionFromProvisioningArtifactWithContext indicates an expected call of BatchDisassociateServiceActionFromProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) BatchDisassociateServiceActionFromProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateServiceActionFromProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).BatchDisassociateServiceActionFromProvisioningArtifactWithContext), varargs...)
}

// CopyProduct mocks base method
func (m *MockServiceCatalogAPI) CopyProduct(arg0 *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.CopyProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyProduct indicates an expected call of CopyProduct
func (mr *MockServiceCatalogAPIMockRecorder) CopyProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CopyProduct), arg0)
}

// CopyProductRequest mocks base method
func (m *MockServiceCatalogAPI) CopyProductRequest(arg0 *servicecatalog.CopyProductInput) (*request.Request, *servicecatalog.CopyProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CopyProductOutput)
	return ret0, ret1
}

// CopyProductRequest indicates an expected call of CopyProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) CopyProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CopyProductRequest), arg0)
}

// CopyProductWithContext mocks base method
func (m *MockServiceCatalogAPI) CopyProductWithContext(arg0 context.Context, arg1 *servicecatalog.CopyProductInput, arg2 ...request.Option) (*servicecatalog.CopyProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CopyProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyProductWithContext indicates an expected call of CopyProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CopyProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CopyProductWithContext), varargs...)
}

// CreateConstraint mocks base method
func (m *MockServiceCatalogAPI) CreateConstraint(arg0 *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConstraint", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConstraint indicates an expected call of CreateConstraint
func (mr *MockServiceCatalogAPIMockRecorder) CreateConstraint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConstraint", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateConstraint), arg0)
}

// CreateConstraintRequest mocks base method
func (m *MockServiceCatalogAPI) CreateConstraintRequest(arg0 *servicecatalog.CreateConstraintInput) (*request.Request, *servicecatalog.CreateConstraintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConstraintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateConstraintOutput)
	return ret0, ret1
}

// CreateConstraintRequest indicates an expected call of CreateConstraintRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateConstraintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConstraintRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateConstraintRequest), arg0)
}

// CreateConstraintWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateConstraintWithContext(arg0 context.Context, arg1 *servicecatalog.CreateConstraintInput, arg2 ...request.Option) (*servicecatalog.CreateConstraintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConstraintWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConstraintWithContext indicates an expected call of CreateConstraintWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateConstraintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConstraintWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateConstraintWithContext), varargs...)
}

// CreatePortfolio mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolio(arg0 *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreatePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolio indicates an expected call of CreatePortfolio
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolio), arg0)
}

// CreatePortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolioRequest(arg0 *servicecatalog.CreatePortfolioInput) (*request.Request, *servicecatalog.CreatePortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreatePortfolioOutput)
	return ret0, ret1
}

// CreatePortfolioRequest indicates an expected call of CreatePortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolioRequest), arg0)
}

// CreatePortfolioShare mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolioShare(arg0 *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolioShare", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreatePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolioShare indicates an expected call of CreatePortfolioShare
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolioShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioShare", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolioShare), arg0)
}

// CreatePortfolioShareRequest mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolioShareRequest(arg0 *servicecatalog.CreatePortfolioShareInput) (*request.Request, *servicecatalog.CreatePortfolioShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolioShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreatePortfolioShareOutput)
	return ret0, ret1
}

// CreatePortfolioShareRequest indicates an expected call of CreatePortfolioShareRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolioShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioShareRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolioShareRequest), arg0)
}

// CreatePortfolioShareWithContext mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolioShareWithContext(arg0 context.Context, arg1 *servicecatalog.CreatePortfolioShareInput, arg2 ...request.Option) (*servicecatalog.CreatePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortfolioShareWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreatePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolioShareWithContext indicates an expected call of CreatePortfolioShareWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolioShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioShareWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolioShareWithContext), varargs...)
}

// CreatePortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) CreatePortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.CreatePortfolioInput, arg2 ...request.Option) (*servicecatalog.CreatePortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreatePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolioWithContext indicates an expected call of CreatePortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreatePortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreatePortfolioWithContext), varargs...)
}

// CreateProduct mocks base method
func (m *MockServiceCatalogAPI) CreateProduct(arg0 *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockServiceCatalogAPIMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProduct), arg0)
}

// CreateProductRequest mocks base method
func (m *MockServiceCatalogAPI) CreateProductRequest(arg0 *servicecatalog.CreateProductInput) (*request.Request, *servicecatalog.CreateProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateProductOutput)
	return ret0, ret1
}

// CreateProductRequest indicates an expected call of CreateProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProductRequest), arg0)
}

// CreateProductWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateProductWithContext(arg0 context.Context, arg1 *servicecatalog.CreateProductInput, arg2 ...request.Option) (*servicecatalog.CreateProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductWithContext indicates an expected call of CreateProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProductWithContext), varargs...)
}

// CreateProvisionedProductPlan mocks base method
func (m *MockServiceCatalogAPI) CreateProvisionedProductPlan(arg0 *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisionedProductPlan", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisionedProductPlan indicates an expected call of CreateProvisionedProductPlan
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisionedProductPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisionedProductPlan", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisionedProductPlan), arg0)
}

// CreateProvisionedProductPlanRequest mocks base method
func (m *MockServiceCatalogAPI) CreateProvisionedProductPlanRequest(arg0 *servicecatalog.CreateProvisionedProductPlanInput) (*request.Request, *servicecatalog.CreateProvisionedProductPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisionedProductPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateProvisionedProductPlanOutput)
	return ret0, ret1
}

// CreateProvisionedProductPlanRequest indicates an expected call of CreateProvisionedProductPlanRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisionedProductPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisionedProductPlanRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisionedProductPlanRequest), arg0)
}

// CreateProvisionedProductPlanWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateProvisionedProductPlanWithContext(arg0 context.Context, arg1 *servicecatalog.CreateProvisionedProductPlanInput, arg2 ...request.Option) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProvisionedProductPlanWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisionedProductPlanWithContext indicates an expected call of CreateProvisionedProductPlanWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisionedProductPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisionedProductPlanWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisionedProductPlanWithContext), varargs...)
}

// CreateProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) CreateProvisioningArtifact(arg0 *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisioningArtifact indicates an expected call of CreateProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisioningArtifact), arg0)
}

// CreateProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) CreateProvisioningArtifactRequest(arg0 *servicecatalog.CreateProvisioningArtifactInput) (*request.Request, *servicecatalog.CreateProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateProvisioningArtifactOutput)
	return ret0, ret1
}

// CreateProvisioningArtifactRequest indicates an expected call of CreateProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisioningArtifactRequest), arg0)
}

// CreateProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.CreateProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisioningArtifactWithContext indicates an expected call of CreateProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateProvisioningArtifactWithContext), varargs...)
}

// CreateServiceAction mocks base method
func (m *MockServiceCatalogAPI) CreateServiceAction(arg0 *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAction indicates an expected call of CreateServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) CreateServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateServiceAction), arg0)
}

// CreateServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) CreateServiceActionRequest(arg0 *servicecatalog.CreateServiceActionInput) (*request.Request, *servicecatalog.CreateServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateServiceActionOutput)
	return ret0, ret1
}

// CreateServiceActionRequest indicates an expected call of CreateServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateServiceActionRequest), arg0)
}

// CreateServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.CreateServiceActionInput, arg2 ...request.Option) (*servicecatalog.CreateServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceActionWithContext indicates an expected call of CreateServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateServiceActionWithContext), varargs...)
}

// CreateTagOption mocks base method
func (m *MockServiceCatalogAPI) CreateTagOption(arg0 *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagOption", arg0)
	ret0, _ := ret[0].(*servicecatalog.CreateTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagOption indicates an expected call of CreateTagOption
func (mr *MockServiceCatalogAPIMockRecorder) CreateTagOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagOption", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateTagOption), arg0)
}

// CreateTagOptionRequest mocks base method
func (m *MockServiceCatalogAPI) CreateTagOptionRequest(arg0 *servicecatalog.CreateTagOptionInput) (*request.Request, *servicecatalog.CreateTagOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.CreateTagOptionOutput)
	return ret0, ret1
}

// CreateTagOptionRequest indicates an expected call of CreateTagOptionRequest
func (mr *MockServiceCatalogAPIMockRecorder) CreateTagOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagOptionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateTagOptionRequest), arg0)
}

// CreateTagOptionWithContext mocks base method
func (m *MockServiceCatalogAPI) CreateTagOptionWithContext(arg0 context.Context, arg1 *servicecatalog.CreateTagOptionInput, arg2 ...request.Option) (*servicecatalog.CreateTagOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagOptionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.CreateTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagOptionWithContext indicates an expected call of CreateTagOptionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) CreateTagOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagOptionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).CreateTagOptionWithContext), varargs...)
}

// DeleteConstraint mocks base method
func (m *MockServiceCatalogAPI) DeleteConstraint(arg0 *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConstraint", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConstraint indicates an expected call of DeleteConstraint
func (mr *MockServiceCatalogAPIMockRecorder) DeleteConstraint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConstraint", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteConstraint), arg0)
}

// DeleteConstraintRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteConstraintRequest(arg0 *servicecatalog.DeleteConstraintInput) (*request.Request, *servicecatalog.DeleteConstraintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConstraintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteConstraintOutput)
	return ret0, ret1
}

// DeleteConstraintRequest indicates an expected call of DeleteConstraintRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteConstraintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConstraintRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteConstraintRequest), arg0)
}

// DeleteConstraintWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteConstraintWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteConstraintInput, arg2 ...request.Option) (*servicecatalog.DeleteConstraintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConstraintWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConstraintWithContext indicates an expected call of DeleteConstraintWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteConstraintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConstraintWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteConstraintWithContext), varargs...)
}

// DeletePortfolio mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolio(arg0 *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeletePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolio indicates an expected call of DeletePortfolio
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolio), arg0)
}

// DeletePortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolioRequest(arg0 *servicecatalog.DeletePortfolioInput) (*request.Request, *servicecatalog.DeletePortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeletePortfolioOutput)
	return ret0, ret1
}

// DeletePortfolioRequest indicates an expected call of DeletePortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolioRequest), arg0)
}

// DeletePortfolioShare mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolioShare(arg0 *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolioShare", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeletePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolioShare indicates an expected call of DeletePortfolioShare
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolioShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioShare", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolioShare), arg0)
}

// DeletePortfolioShareRequest mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolioShareRequest(arg0 *servicecatalog.DeletePortfolioShareInput) (*request.Request, *servicecatalog.DeletePortfolioShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolioShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeletePortfolioShareOutput)
	return ret0, ret1
}

// DeletePortfolioShareRequest indicates an expected call of DeletePortfolioShareRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolioShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioShareRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolioShareRequest), arg0)
}

// DeletePortfolioShareWithContext mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolioShareWithContext(arg0 context.Context, arg1 *servicecatalog.DeletePortfolioShareInput, arg2 ...request.Option) (*servicecatalog.DeletePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortfolioShareWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeletePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolioShareWithContext indicates an expected call of DeletePortfolioShareWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolioShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioShareWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolioShareWithContext), varargs...)
}

// DeletePortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) DeletePortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.DeletePortfolioInput, arg2 ...request.Option) (*servicecatalog.DeletePortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeletePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolioWithContext indicates an expected call of DeletePortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeletePortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeletePortfolioWithContext), varargs...)
}

// DeleteProduct mocks base method
func (m *MockServiceCatalogAPI) DeleteProduct(arg0 *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProduct), arg0)
}

// DeleteProductRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteProductRequest(arg0 *servicecatalog.DeleteProductInput) (*request.Request, *servicecatalog.DeleteProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteProductOutput)
	return ret0, ret1
}

// DeleteProductRequest indicates an expected call of DeleteProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProductRequest), arg0)
}

// DeleteProductWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteProductWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteProductInput, arg2 ...request.Option) (*servicecatalog.DeleteProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductWithContext indicates an expected call of DeleteProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProductWithContext), varargs...)
}

// DeleteProvisionedProductPlan mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisionedProductPlan(arg0 *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvisionedProductPlan", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvisionedProductPlan indicates an expected call of DeleteProvisionedProductPlan
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisionedProductPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisionedProductPlan", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisionedProductPlan), arg0)
}

// DeleteProvisionedProductPlanRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisionedProductPlanRequest(arg0 *servicecatalog.DeleteProvisionedProductPlanInput) (*request.Request, *servicecatalog.DeleteProvisionedProductPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvisionedProductPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	return ret0, ret1
}

// DeleteProvisionedProductPlanRequest indicates an expected call of DeleteProvisionedProductPlanRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisionedProductPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisionedProductPlanRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisionedProductPlanRequest), arg0)
}

// DeleteProvisionedProductPlanWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisionedProductPlanWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteProvisionedProductPlanInput, arg2 ...request.Option) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProvisionedProductPlanWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvisionedProductPlanWithContext indicates an expected call of DeleteProvisionedProductPlanWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisionedProductPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisionedProductPlanWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisionedProductPlanWithContext), varargs...)
}

// DeleteProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisioningArtifact(arg0 *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvisioningArtifact indicates an expected call of DeleteProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisioningArtifact), arg0)
}

// DeleteProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisioningArtifactRequest(arg0 *servicecatalog.DeleteProvisioningArtifactInput) (*request.Request, *servicecatalog.DeleteProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteProvisioningArtifactOutput)
	return ret0, ret1
}

// DeleteProvisioningArtifactRequest indicates an expected call of DeleteProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisioningArtifactRequest), arg0)
}

// DeleteProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvisioningArtifactWithContext indicates an expected call of DeleteProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteProvisioningArtifactWithContext), varargs...)
}

// DeleteServiceAction mocks base method
func (m *MockServiceCatalogAPI) DeleteServiceAction(arg0 *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAction indicates an expected call of DeleteServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) DeleteServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteServiceAction), arg0)
}

// DeleteServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteServiceActionRequest(arg0 *servicecatalog.DeleteServiceActionInput) (*request.Request, *servicecatalog.DeleteServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteServiceActionOutput)
	return ret0, ret1
}

// DeleteServiceActionRequest indicates an expected call of DeleteServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteServiceActionRequest), arg0)
}

// DeleteServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteServiceActionInput, arg2 ...request.Option) (*servicecatalog.DeleteServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceActionWithContext indicates an expected call of DeleteServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteServiceActionWithContext), varargs...)
}

// DeleteTagOption mocks base method
func (m *MockServiceCatalogAPI) DeleteTagOption(arg0 *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagOption", arg0)
	ret0, _ := ret[0].(*servicecatalog.DeleteTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagOption indicates an expected call of DeleteTagOption
func (mr *MockServiceCatalogAPIMockRecorder) DeleteTagOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagOption", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteTagOption), arg0)
}

// DeleteTagOptionRequest mocks base method
func (m *MockServiceCatalogAPI) DeleteTagOptionRequest(arg0 *servicecatalog.DeleteTagOptionInput) (*request.Request, *servicecatalog.DeleteTagOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DeleteTagOptionOutput)
	return ret0, ret1
}

// DeleteTagOptionRequest indicates an expected call of DeleteTagOptionRequest
func (mr *MockServiceCatalogAPIMockRecorder) DeleteTagOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagOptionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteTagOptionRequest), arg0)
}

// DeleteTagOptionWithContext mocks base method
func (m *MockServiceCatalogAPI) DeleteTagOptionWithContext(arg0 context.Context, arg1 *servicecatalog.DeleteTagOptionInput, arg2 ...request.Option) (*servicecatalog.DeleteTagOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagOptionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DeleteTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagOptionWithContext indicates an expected call of DeleteTagOptionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DeleteTagOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagOptionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DeleteTagOptionWithContext), varargs...)
}

// DescribeConstraint mocks base method
func (m *MockServiceCatalogAPI) DescribeConstraint(arg0 *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConstraint", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConstraint indicates an expected call of DescribeConstraint
func (mr *MockServiceCatalogAPIMockRecorder) DescribeConstraint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConstraint", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeConstraint), arg0)
}

// DescribeConstraintRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeConstraintRequest(arg0 *servicecatalog.DescribeConstraintInput) (*request.Request, *servicecatalog.DescribeConstraintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConstraintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeConstraintOutput)
	return ret0, ret1
}

// DescribeConstraintRequest indicates an expected call of DescribeConstraintRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeConstraintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConstraintRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeConstraintRequest), arg0)
}

// DescribeConstraintWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeConstraintWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeConstraintInput, arg2 ...request.Option) (*servicecatalog.DescribeConstraintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConstraintWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConstraintWithContext indicates an expected call of DescribeConstraintWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeConstraintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConstraintWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeConstraintWithContext), varargs...)
}

// DescribeCopyProductStatus mocks base method
func (m *MockServiceCatalogAPI) DescribeCopyProductStatus(arg0 *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCopyProductStatus", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeCopyProductStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCopyProductStatus indicates an expected call of DescribeCopyProductStatus
func (mr *MockServiceCatalogAPIMockRecorder) DescribeCopyProductStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyProductStatus", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeCopyProductStatus), arg0)
}

// DescribeCopyProductStatusRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeCopyProductStatusRequest(arg0 *servicecatalog.DescribeCopyProductStatusInput) (*request.Request, *servicecatalog.DescribeCopyProductStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCopyProductStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeCopyProductStatusOutput)
	return ret0, ret1
}

// DescribeCopyProductStatusRequest indicates an expected call of DescribeCopyProductStatusRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeCopyProductStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyProductStatusRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeCopyProductStatusRequest), arg0)
}

// DescribeCopyProductStatusWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeCopyProductStatusWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeCopyProductStatusInput, arg2 ...request.Option) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCopyProductStatusWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeCopyProductStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCopyProductStatusWithContext indicates an expected call of DescribeCopyProductStatusWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeCopyProductStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyProductStatusWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeCopyProductStatusWithContext), varargs...)
}

// DescribePortfolio mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolio(arg0 *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolio indicates an expected call of DescribePortfolio
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolio), arg0)
}

// DescribePortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioRequest(arg0 *servicecatalog.DescribePortfolioInput) (*request.Request, *servicecatalog.DescribePortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribePortfolioOutput)
	return ret0, ret1
}

// DescribePortfolioRequest indicates an expected call of DescribePortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioRequest), arg0)
}

// DescribePortfolioShareStatus mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioShareStatus(arg0 *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioShareStatus", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioShareStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioShareStatus indicates an expected call of DescribePortfolioShareStatus
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioShareStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShareStatus", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioShareStatus), arg0)
}

// DescribePortfolioShareStatusRequest mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioShareStatusRequest(arg0 *servicecatalog.DescribePortfolioShareStatusInput) (*request.Request, *servicecatalog.DescribePortfolioShareStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioShareStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribePortfolioShareStatusOutput)
	return ret0, ret1
}

// DescribePortfolioShareStatusRequest indicates an expected call of DescribePortfolioShareStatusRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioShareStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShareStatusRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioShareStatusRequest), arg0)
}

// DescribePortfolioShareStatusWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioShareStatusWithContext(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioShareStatusInput, arg2 ...request.Option) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioShareStatusWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioShareStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioShareStatusWithContext indicates an expected call of DescribePortfolioShareStatusWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioShareStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShareStatusWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioShareStatusWithContext), varargs...)
}

// DescribePortfolioShares mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioShares(arg0 *servicecatalog.DescribePortfolioSharesInput) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioShares", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioShares indicates an expected call of DescribePortfolioShares
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShares", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioShares), arg0)
}

// DescribePortfolioSharesPages mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioSharesPages(arg0 *servicecatalog.DescribePortfolioSharesInput, arg1 func(*servicecatalog.DescribePortfolioSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePortfolioSharesPages indicates an expected call of DescribePortfolioSharesPages
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioSharesPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioSharesPages), arg0, arg1)
}

// DescribePortfolioSharesPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioSharesPagesWithContext(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioSharesInput, arg2 func(*servicecatalog.DescribePortfolioSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePortfolioSharesPagesWithContext indicates an expected call of DescribePortfolioSharesPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioSharesPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioSharesPagesWithContext), varargs...)
}

// DescribePortfolioSharesRequest mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioSharesRequest(arg0 *servicecatalog.DescribePortfolioSharesInput) (*request.Request, *servicecatalog.DescribePortfolioSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortfolioSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribePortfolioSharesOutput)
	return ret0, ret1
}

// DescribePortfolioSharesRequest indicates an expected call of DescribePortfolioSharesRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioSharesRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioSharesRequest), arg0)
}

// DescribePortfolioSharesWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioSharesWithContext(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioSharesInput, arg2 ...request.Option) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioSharesWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioSharesWithContext indicates an expected call of DescribePortfolioSharesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioSharesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioSharesWithContext), varargs...)
}

// DescribePortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribePortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioInput, arg2 ...request.Option) (*servicecatalog.DescribePortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioWithContext indicates an expected call of DescribePortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribePortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribePortfolioWithContext), varargs...)
}

// DescribeProduct mocks base method
func (m *MockServiceCatalogAPI) DescribeProduct(arg0 *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProduct indicates an expected call of DescribeProduct
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProduct), arg0)
}

// DescribeProductAsAdmin mocks base method
func (m *MockServiceCatalogAPI) DescribeProductAsAdmin(arg0 *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAsAdmin", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductAsAdmin indicates an expected call of DescribeProductAsAdmin
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductAsAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAsAdmin", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductAsAdmin), arg0)
}

// DescribeProductAsAdminRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProductAsAdminRequest(arg0 *servicecatalog.DescribeProductAsAdminInput) (*request.Request, *servicecatalog.DescribeProductAsAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAsAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProductAsAdminOutput)
	return ret0, ret1
}

// DescribeProductAsAdminRequest indicates an expected call of DescribeProductAsAdminRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductAsAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAsAdminRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductAsAdminRequest), arg0)
}

// DescribeProductAsAdminWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProductAsAdminWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProductAsAdminInput, arg2 ...request.Option) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductAsAdminWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductAsAdminWithContext indicates an expected call of DescribeProductAsAdminWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductAsAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAsAdminWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductAsAdminWithContext), varargs...)
}

// DescribeProductRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProductRequest(arg0 *servicecatalog.DescribeProductInput) (*request.Request, *servicecatalog.DescribeProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProductOutput)
	return ret0, ret1
}

// DescribeProductRequest indicates an expected call of DescribeProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductRequest), arg0)
}

// DescribeProductView mocks base method
func (m *MockServiceCatalogAPI) DescribeProductView(arg0 *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductView", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductView indicates an expected call of DescribeProductView
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductView", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductView), arg0)
}

// DescribeProductViewRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProductViewRequest(arg0 *servicecatalog.DescribeProductViewInput) (*request.Request, *servicecatalog.DescribeProductViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProductViewOutput)
	return ret0, ret1
}

// DescribeProductViewRequest indicates an expected call of DescribeProductViewRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductViewRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductViewRequest), arg0)
}

// DescribeProductViewWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProductViewWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProductViewInput, arg2 ...request.Option) (*servicecatalog.DescribeProductViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductViewWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductViewWithContext indicates an expected call of DescribeProductViewWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductViewWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductViewWithContext), varargs...)
}

// DescribeProductWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProductWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProductInput, arg2 ...request.Option) (*servicecatalog.DescribeProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductWithContext indicates an expected call of DescribeProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProductWithContext), varargs...)
}

// DescribeProvisionedProduct mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProduct(arg0 *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisionedProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProduct indicates an expected call of DescribeProvisionedProduct
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProduct), arg0)
}

// DescribeProvisionedProductPlan mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProductPlan(arg0 *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisionedProductPlan", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProductPlan indicates an expected call of DescribeProvisionedProductPlan
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProductPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductPlan", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProductPlan), arg0)
}

// DescribeProvisionedProductPlanRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProductPlanRequest(arg0 *servicecatalog.DescribeProvisionedProductPlanInput) (*request.Request, *servicecatalog.DescribeProvisionedProductPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisionedProductPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	return ret0, ret1
}

// DescribeProvisionedProductPlanRequest indicates an expected call of DescribeProvisionedProductPlanRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProductPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductPlanRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProductPlanRequest), arg0)
}

// DescribeProvisionedProductPlanWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProductPlanWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProvisionedProductPlanInput, arg2 ...request.Option) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisionedProductPlanWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProductPlanWithContext indicates an expected call of DescribeProvisionedProductPlanWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProductPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductPlanWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProductPlanWithContext), varargs...)
}

// DescribeProvisionedProductRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProductRequest(arg0 *servicecatalog.DescribeProvisionedProductInput) (*request.Request, *servicecatalog.DescribeProvisionedProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisionedProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProvisionedProductOutput)
	return ret0, ret1
}

// DescribeProvisionedProductRequest indicates an expected call of DescribeProvisionedProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProductRequest), arg0)
}

// DescribeProvisionedProductWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisionedProductWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProvisionedProductInput, arg2 ...request.Option) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisionedProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProductWithContext indicates an expected call of DescribeProvisionedProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisionedProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisionedProductWithContext), varargs...)
}

// DescribeProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningArtifact(arg0 *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningArtifact indicates an expected call of DescribeProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningArtifact), arg0)
}

// DescribeProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningArtifactRequest(arg0 *servicecatalog.DescribeProvisioningArtifactInput) (*request.Request, *servicecatalog.DescribeProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProvisioningArtifactOutput)
	return ret0, ret1
}

// DescribeProvisioningArtifactRequest indicates an expected call of DescribeProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningArtifactRequest), arg0)
}

// DescribeProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningArtifactWithContext indicates an expected call of DescribeProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningArtifactWithContext), varargs...)
}

// DescribeProvisioningParameters mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningParameters(arg0 *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisioningParameters", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningParameters indicates an expected call of DescribeProvisioningParameters
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningParameters", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningParameters), arg0)
}

// DescribeProvisioningParametersRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningParametersRequest(arg0 *servicecatalog.DescribeProvisioningParametersInput) (*request.Request, *servicecatalog.DescribeProvisioningParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProvisioningParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeProvisioningParametersOutput)
	return ret0, ret1
}

// DescribeProvisioningParametersRequest indicates an expected call of DescribeProvisioningParametersRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningParametersRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningParametersRequest), arg0)
}

// DescribeProvisioningParametersWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeProvisioningParametersWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeProvisioningParametersInput, arg2 ...request.Option) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningParametersWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningParametersWithContext indicates an expected call of DescribeProvisioningParametersWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeProvisioningParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningParametersWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeProvisioningParametersWithContext), varargs...)
}

// DescribeRecord mocks base method
func (m *MockServiceCatalogAPI) DescribeRecord(arg0 *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecord", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecord indicates an expected call of DescribeRecord
func (mr *MockServiceCatalogAPIMockRecorder) DescribeRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecord", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeRecord), arg0)
}

// DescribeRecordRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeRecordRequest(arg0 *servicecatalog.DescribeRecordInput) (*request.Request, *servicecatalog.DescribeRecordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeRecordOutput)
	return ret0, ret1
}

// DescribeRecordRequest indicates an expected call of DescribeRecordRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeRecordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecordRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeRecordRequest), arg0)
}

// DescribeRecordWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeRecordWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeRecordInput, arg2 ...request.Option) (*servicecatalog.DescribeRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecordWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecordWithContext indicates an expected call of DescribeRecordWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeRecordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecordWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeRecordWithContext), varargs...)
}

// DescribeServiceAction mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceAction(arg0 *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceAction indicates an expected call of DescribeServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceAction), arg0)
}

// DescribeServiceActionExecutionParameters mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceActionExecutionParameters(arg0 *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceActionExecutionParameters", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceActionExecutionParameters indicates an expected call of DescribeServiceActionExecutionParameters
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceActionExecutionParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionExecutionParameters", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceActionExecutionParameters), arg0)
}

// DescribeServiceActionExecutionParametersRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceActionExecutionParametersRequest(arg0 *servicecatalog.DescribeServiceActionExecutionParametersInput) (*request.Request, *servicecatalog.DescribeServiceActionExecutionParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceActionExecutionParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	return ret0, ret1
}

// DescribeServiceActionExecutionParametersRequest indicates an expected call of DescribeServiceActionExecutionParametersRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceActionExecutionParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionExecutionParametersRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceActionExecutionParametersRequest), arg0)
}

// DescribeServiceActionExecutionParametersWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceActionExecutionParametersWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeServiceActionExecutionParametersInput, arg2 ...request.Option) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceActionExecutionParametersWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceActionExecutionParametersWithContext indicates an expected call of DescribeServiceActionExecutionParametersWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceActionExecutionParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionExecutionParametersWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceActionExecutionParametersWithContext), varargs...)
}

// DescribeServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceActionRequest(arg0 *servicecatalog.DescribeServiceActionInput) (*request.Request, *servicecatalog.DescribeServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeServiceActionOutput)
	return ret0, ret1
}

// DescribeServiceActionRequest indicates an expected call of DescribeServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceActionRequest), arg0)
}

// DescribeServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeServiceActionInput, arg2 ...request.Option) (*servicecatalog.DescribeServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceActionWithContext indicates an expected call of DescribeServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeServiceActionWithContext), varargs...)
}

// DescribeTagOption mocks base method
func (m *MockServiceCatalogAPI) DescribeTagOption(arg0 *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagOption", arg0)
	ret0, _ := ret[0].(*servicecatalog.DescribeTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagOption indicates an expected call of DescribeTagOption
func (mr *MockServiceCatalogAPIMockRecorder) DescribeTagOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagOption", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeTagOption), arg0)
}

// DescribeTagOptionRequest mocks base method
func (m *MockServiceCatalogAPI) DescribeTagOptionRequest(arg0 *servicecatalog.DescribeTagOptionInput) (*request.Request, *servicecatalog.DescribeTagOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DescribeTagOptionOutput)
	return ret0, ret1
}

// DescribeTagOptionRequest indicates an expected call of DescribeTagOptionRequest
func (mr *MockServiceCatalogAPIMockRecorder) DescribeTagOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagOptionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeTagOptionRequest), arg0)
}

// DescribeTagOptionWithContext mocks base method
func (m *MockServiceCatalogAPI) DescribeTagOptionWithContext(arg0 context.Context, arg1 *servicecatalog.DescribeTagOptionInput, arg2 ...request.Option) (*servicecatalog.DescribeTagOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagOptionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagOptionWithContext indicates an expected call of DescribeTagOptionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DescribeTagOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagOptionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DescribeTagOptionWithContext), varargs...)
}

// DisableAWSOrganizationsAccess mocks base method
func (m *MockServiceCatalogAPI) DisableAWSOrganizationsAccess(arg0 *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAWSOrganizationsAccess", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAWSOrganizationsAccess indicates an expected call of DisableAWSOrganizationsAccess
func (mr *MockServiceCatalogAPIMockRecorder) DisableAWSOrganizationsAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAWSOrganizationsAccess", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisableAWSOrganizationsAccess), arg0)
}

// DisableAWSOrganizationsAccessRequest mocks base method
func (m *MockServiceCatalogAPI) DisableAWSOrganizationsAccessRequest(arg0 *servicecatalog.DisableAWSOrganizationsAccessInput) (*request.Request, *servicecatalog.DisableAWSOrganizationsAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAWSOrganizationsAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	return ret0, ret1
}

// DisableAWSOrganizationsAccessRequest indicates an expected call of DisableAWSOrganizationsAccessRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisableAWSOrganizationsAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAWSOrganizationsAccessRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisableAWSOrganizationsAccessRequest), arg0)
}

// DisableAWSOrganizationsAccessWithContext mocks base method
func (m *MockServiceCatalogAPI) DisableAWSOrganizationsAccessWithContext(arg0 context.Context, arg1 *servicecatalog.DisableAWSOrganizationsAccessInput, arg2 ...request.Option) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAWSOrganizationsAccessWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAWSOrganizationsAccessWithContext indicates an expected call of DisableAWSOrganizationsAccessWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisableAWSOrganizationsAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAWSOrganizationsAccessWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisableAWSOrganizationsAccessWithContext), varargs...)
}

// DisassociateBudgetFromResource mocks base method
func (m *MockServiceCatalogAPI) DisassociateBudgetFromResource(arg0 *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateBudgetFromResource", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateBudgetFromResource indicates an expected call of DisassociateBudgetFromResource
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateBudgetFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateBudgetFromResource", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateBudgetFromResource), arg0)
}

// DisassociateBudgetFromResourceRequest mocks base method
func (m *MockServiceCatalogAPI) DisassociateBudgetFromResourceRequest(arg0 *servicecatalog.DisassociateBudgetFromResourceInput) (*request.Request, *servicecatalog.DisassociateBudgetFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateBudgetFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	return ret0, ret1
}

// DisassociateBudgetFromResourceRequest indicates an expected call of DisassociateBudgetFromResourceRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateBudgetFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateBudgetFromResourceRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateBudgetFromResourceRequest), arg0)
}

// DisassociateBudgetFromResourceWithContext mocks base method
func (m *MockServiceCatalogAPI) DisassociateBudgetFromResourceWithContext(arg0 context.Context, arg1 *servicecatalog.DisassociateBudgetFromResourceInput, arg2 ...request.Option) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateBudgetFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateBudgetFromResourceWithContext indicates an expected call of DisassociateBudgetFromResourceWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateBudgetFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateBudgetFromResourceWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateBudgetFromResourceWithContext), varargs...)
}

// DisassociatePrincipalFromPortfolio mocks base method
func (m *MockServiceCatalogAPI) DisassociatePrincipalFromPortfolio(arg0 *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePrincipalFromPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePrincipalFromPortfolio indicates an expected call of DisassociatePrincipalFromPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) DisassociatePrincipalFromPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePrincipalFromPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociatePrincipalFromPortfolio), arg0)
}

// DisassociatePrincipalFromPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) DisassociatePrincipalFromPortfolioRequest(arg0 *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*request.Request, *servicecatalog.DisassociatePrincipalFromPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePrincipalFromPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	return ret0, ret1
}

// DisassociatePrincipalFromPortfolioRequest indicates an expected call of DisassociatePrincipalFromPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisassociatePrincipalFromPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePrincipalFromPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociatePrincipalFromPortfolioRequest), arg0)
}

// DisassociatePrincipalFromPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) DisassociatePrincipalFromPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.DisassociatePrincipalFromPortfolioInput, arg2 ...request.Option) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociatePrincipalFromPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePrincipalFromPortfolioWithContext indicates an expected call of DisassociatePrincipalFromPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisassociatePrincipalFromPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePrincipalFromPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociatePrincipalFromPortfolioWithContext), varargs...)
}

// DisassociateProductFromPortfolio mocks base method
func (m *MockServiceCatalogAPI) DisassociateProductFromPortfolio(arg0 *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProductFromPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProductFromPortfolio indicates an expected call of DisassociateProductFromPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateProductFromPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProductFromPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateProductFromPortfolio), arg0)
}

// DisassociateProductFromPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) DisassociateProductFromPortfolioRequest(arg0 *servicecatalog.DisassociateProductFromPortfolioInput) (*request.Request, *servicecatalog.DisassociateProductFromPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProductFromPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	return ret0, ret1
}

// DisassociateProductFromPortfolioRequest indicates an expected call of DisassociateProductFromPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateProductFromPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProductFromPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateProductFromPortfolioRequest), arg0)
}

// DisassociateProductFromPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) DisassociateProductFromPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.DisassociateProductFromPortfolioInput, arg2 ...request.Option) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateProductFromPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProductFromPortfolioWithContext indicates an expected call of DisassociateProductFromPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateProductFromPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProductFromPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateProductFromPortfolioWithContext), varargs...)
}

// DisassociateServiceActionFromProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) DisassociateServiceActionFromProvisioningArtifact(arg0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateServiceActionFromProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateServiceActionFromProvisioningArtifact indicates an expected call of DisassociateServiceActionFromProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateServiceActionFromProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateServiceActionFromProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateServiceActionFromProvisioningArtifact), arg0)
}

// DisassociateServiceActionFromProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) DisassociateServiceActionFromProvisioningArtifactRequest(arg0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*request.Request, *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateServiceActionFromProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	return ret0, ret1
}

// DisassociateServiceActionFromProvisioningArtifactRequest indicates an expected call of DisassociateServiceActionFromProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateServiceActionFromProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateServiceActionFromProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateServiceActionFromProvisioningArtifactRequest), arg0)
}

// DisassociateServiceActionFromProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) DisassociateServiceActionFromProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateServiceActionFromProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateServiceActionFromProvisioningArtifactWithContext indicates an expected call of DisassociateServiceActionFromProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateServiceActionFromProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateServiceActionFromProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateServiceActionFromProvisioningArtifactWithContext), varargs...)
}

// DisassociateTagOptionFromResource mocks base method
func (m *MockServiceCatalogAPI) DisassociateTagOptionFromResource(arg0 *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTagOptionFromResource", arg0)
	ret0, _ := ret[0].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTagOptionFromResource indicates an expected call of DisassociateTagOptionFromResource
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateTagOptionFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTagOptionFromResource", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateTagOptionFromResource), arg0)
}

// DisassociateTagOptionFromResourceRequest mocks base method
func (m *MockServiceCatalogAPI) DisassociateTagOptionFromResourceRequest(arg0 *servicecatalog.DisassociateTagOptionFromResourceInput) (*request.Request, *servicecatalog.DisassociateTagOptionFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTagOptionFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	return ret0, ret1
}

// DisassociateTagOptionFromResourceRequest indicates an expected call of DisassociateTagOptionFromResourceRequest
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateTagOptionFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTagOptionFromResourceRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateTagOptionFromResourceRequest), arg0)
}

// DisassociateTagOptionFromResourceWithContext mocks base method
func (m *MockServiceCatalogAPI) DisassociateTagOptionFromResourceWithContext(arg0 context.Context, arg1 *servicecatalog.DisassociateTagOptionFromResourceInput, arg2 ...request.Option) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateTagOptionFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTagOptionFromResourceWithContext indicates an expected call of DisassociateTagOptionFromResourceWithContext
func (mr *MockServiceCatalogAPIMockRecorder) DisassociateTagOptionFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTagOptionFromResourceWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).DisassociateTagOptionFromResourceWithContext), varargs...)
}

// EnableAWSOrganizationsAccess mocks base method
func (m *MockServiceCatalogAPI) EnableAWSOrganizationsAccess(arg0 *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAWSOrganizationsAccess", arg0)
	ret0, _ := ret[0].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAWSOrganizationsAccess indicates an expected call of EnableAWSOrganizationsAccess
func (mr *MockServiceCatalogAPIMockRecorder) EnableAWSOrganizationsAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAWSOrganizationsAccess", reflect.TypeOf((*MockServiceCatalogAPI)(nil).EnableAWSOrganizationsAccess), arg0)
}

// EnableAWSOrganizationsAccessRequest mocks base method
func (m *MockServiceCatalogAPI) EnableAWSOrganizationsAccessRequest(arg0 *servicecatalog.EnableAWSOrganizationsAccessInput) (*request.Request, *servicecatalog.EnableAWSOrganizationsAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAWSOrganizationsAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	return ret0, ret1
}

// EnableAWSOrganizationsAccessRequest indicates an expected call of EnableAWSOrganizationsAccessRequest
func (mr *MockServiceCatalogAPIMockRecorder) EnableAWSOrganizationsAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAWSOrganizationsAccessRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).EnableAWSOrganizationsAccessRequest), arg0)
}

// EnableAWSOrganizationsAccessWithContext mocks base method
func (m *MockServiceCatalogAPI) EnableAWSOrganizationsAccessWithContext(arg0 context.Context, arg1 *servicecatalog.EnableAWSOrganizationsAccessInput, arg2 ...request.Option) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAWSOrganizationsAccessWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAWSOrganizationsAccessWithContext indicates an expected call of EnableAWSOrganizationsAccessWithContext
func (mr *MockServiceCatalogAPIMockRecorder) EnableAWSOrganizationsAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAWSOrganizationsAccessWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).EnableAWSOrganizationsAccessWithContext), varargs...)
}

// ExecuteProvisionedProductPlan mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductPlan(arg0 *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductPlan", arg0)
	ret0, _ := ret[0].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProvisionedProductPlan indicates an expected call of ExecuteProvisionedProductPlan
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductPlan", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductPlan), arg0)
}

// ExecuteProvisionedProductPlanRequest mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductPlanRequest(arg0 *servicecatalog.ExecuteProvisionedProductPlanInput) (*request.Request, *servicecatalog.ExecuteProvisionedProductPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	return ret0, ret1
}

// ExecuteProvisionedProductPlanRequest indicates an expected call of ExecuteProvisionedProductPlanRequest
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductPlanRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductPlanRequest), arg0)
}

// ExecuteProvisionedProductPlanWithContext mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductPlanWithContext(arg0 context.Context, arg1 *servicecatalog.ExecuteProvisionedProductPlanInput, arg2 ...request.Option) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductPlanWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProvisionedProductPlanWithContext indicates an expected call of ExecuteProvisionedProductPlanWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductPlanWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductPlanWithContext), varargs...)
}

// ExecuteProvisionedProductServiceAction mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductServiceAction(arg0 *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProvisionedProductServiceAction indicates an expected call of ExecuteProvisionedProductServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductServiceAction), arg0)
}

// ExecuteProvisionedProductServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductServiceActionRequest(arg0 *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*request.Request, *servicecatalog.ExecuteProvisionedProductServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	return ret0, ret1
}

// ExecuteProvisionedProductServiceActionRequest indicates an expected call of ExecuteProvisionedProductServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductServiceActionRequest), arg0)
}

// ExecuteProvisionedProductServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) ExecuteProvisionedProductServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.ExecuteProvisionedProductServiceActionInput, arg2 ...request.Option) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteProvisionedProductServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProvisionedProductServiceActionWithContext indicates an expected call of ExecuteProvisionedProductServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ExecuteProvisionedProductServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProvisionedProductServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ExecuteProvisionedProductServiceActionWithContext), varargs...)
}

// GetAWSOrganizationsAccessStatus mocks base method
func (m *MockServiceCatalogAPI) GetAWSOrganizationsAccessStatus(arg0 *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSOrganizationsAccessStatus", arg0)
	ret0, _ := ret[0].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSOrganizationsAccessStatus indicates an expected call of GetAWSOrganizationsAccessStatus
func (mr *MockServiceCatalogAPIMockRecorder) GetAWSOrganizationsAccessStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOrganizationsAccessStatus", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetAWSOrganizationsAccessStatus), arg0)
}

// GetAWSOrganizationsAccessStatusRequest mocks base method
func (m *MockServiceCatalogAPI) GetAWSOrganizationsAccessStatusRequest(arg0 *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*request.Request, *servicecatalog.GetAWSOrganizationsAccessStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSOrganizationsAccessStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	return ret0, ret1
}

// GetAWSOrganizationsAccessStatusRequest indicates an expected call of GetAWSOrganizationsAccessStatusRequest
func (mr *MockServiceCatalogAPIMockRecorder) GetAWSOrganizationsAccessStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOrganizationsAccessStatusRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetAWSOrganizationsAccessStatusRequest), arg0)
}

// GetAWSOrganizationsAccessStatusWithContext mocks base method
func (m *MockServiceCatalogAPI) GetAWSOrganizationsAccessStatusWithContext(arg0 context.Context, arg1 *servicecatalog.GetAWSOrganizationsAccessStatusInput, arg2 ...request.Option) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAWSOrganizationsAccessStatusWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSOrganizationsAccessStatusWithContext indicates an expected call of GetAWSOrganizationsAccessStatusWithContext
func (mr *MockServiceCatalogAPIMockRecorder) GetAWSOrganizationsAccessStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOrganizationsAccessStatusWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetAWSOrganizationsAccessStatusWithContext), varargs...)
}

// GetProvisionedProductOutputs mocks base method
func (m *MockServiceCatalogAPI) GetProvisionedProductOutputs(arg0 *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputs", arg0)
	ret0, _ := ret[0].(*servicecatalog.GetProvisionedProductOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvisionedProductOutputs indicates an expected call of GetProvisionedProductOutputs
func (mr *MockServiceCatalogAPIMockRecorder) GetProvisionedProductOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputs", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetProvisionedProductOutputs), arg0)
}

// GetProvisionedProductOutputsPages mocks base method
func (m *MockServiceCatalogAPI) GetProvisionedProductOutputsPages(arg0 *servicecatalog.GetProvisionedProductOutputsInput, arg1 func(*servicecatalog.GetProvisionedProductOutputsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProvisionedProductOutputsPages indicates an expected call of GetProvisionedProductOutputsPages
func (mr *MockServiceCatalogAPIMockRecorder) GetProvisionedProductOutputsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetProvisionedProductOutputsPages), arg0, arg1)
}

// GetProvisionedProductOutputsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) GetProvisionedProductOutputsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.GetProvisionedProductOutputsInput, arg2 func(*servicecatalog.GetProvisionedProductOutputsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProvisionedProductOutputsPagesWithContext indicates an expected call of GetProvisionedProductOutputsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) GetProvisionedProductOutputsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetProvisionedProductOutputsPagesWithContext), varargs...)
}

// GetProvisionedProductOutputsRequest mocks base method
func (m *MockServiceCatalogAPI) GetProvisionedProductOutputsRequest(arg0 *servicecatalog.GetProvisionedProductOutputsInput) (*request.Request, *servicecatalog.GetProvisionedProductOutputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.GetProvisionedProductOutputsOutput)
	return ret0, ret1
}

// GetProvisionedProductOutputsRequest indicates an expected call of GetProvisionedProductOutputsRequest
func (mr *MockServiceCatalogAPIMockRecorder) GetProvisionedProductOutputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetProvisionedProductOutputsRequest), arg0)
}

// GetProvisionedProductOutputsWithContext mocks base method
func (m *MockServiceCatalogAPI) GetProvisionedProductOutputsWithContext(arg0 context.Context, arg1 *servicecatalog.GetProvisionedProductOutputsInput, arg2 ...request.Option) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.GetProvisionedProductOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvisionedProductOutputsWithContext indicates an expected call of GetProvisionedProductOutputsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) GetProvisionedProductOutputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).GetProvisionedProductOutputsWithContext), varargs...)
}

// ImportAsProvisionedProduct mocks base method
func (m *MockServiceCatalogAPI) ImportAsProvisionedProduct(arg0 *servicecatalog.ImportAsProvisionedProductInput) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAsProvisionedProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.ImportAsProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAsProvisionedProduct indicates an expected call of ImportAsProvisionedProduct
func (mr *MockServiceCatalogAPIMockRecorder) ImportAsProvisionedProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAsProvisionedProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ImportAsProvisionedProduct), arg0)
}

// ImportAsProvisionedProductRequest mocks base method
func (m *MockServiceCatalogAPI) ImportAsProvisionedProductRequest(arg0 *servicecatalog.ImportAsProvisionedProductInput) (*request.Request, *servicecatalog.ImportAsProvisionedProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAsProvisionedProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ImportAsProvisionedProductOutput)
	return ret0, ret1
}

// ImportAsProvisionedProductRequest indicates an expected call of ImportAsProvisionedProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) ImportAsProvisionedProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAsProvisionedProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ImportAsProvisionedProductRequest), arg0)
}

// ImportAsProvisionedProductWithContext mocks base method
func (m *MockServiceCatalogAPI) ImportAsProvisionedProductWithContext(arg0 context.Context, arg1 *servicecatalog.ImportAsProvisionedProductInput, arg2 ...request.Option) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportAsProvisionedProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ImportAsProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAsProvisionedProductWithContext indicates an expected call of ImportAsProvisionedProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ImportAsProvisionedProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAsProvisionedProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ImportAsProvisionedProductWithContext), varargs...)
}

// ListAcceptedPortfolioShares mocks base method
func (m *MockServiceCatalogAPI) ListAcceptedPortfolioShares(arg0 *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioShares", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceptedPortfolioShares indicates an expected call of ListAcceptedPortfolioShares
func (mr *MockServiceCatalogAPIMockRecorder) ListAcceptedPortfolioShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioShares", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListAcceptedPortfolioShares), arg0)
}

// ListAcceptedPortfolioSharesPages mocks base method
func (m *MockServiceCatalogAPI) ListAcceptedPortfolioSharesPages(arg0 *servicecatalog.ListAcceptedPortfolioSharesInput, arg1 func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAcceptedPortfolioSharesPages indicates an expected call of ListAcceptedPortfolioSharesPages
func (mr *MockServiceCatalogAPIMockRecorder) ListAcceptedPortfolioSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioSharesPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListAcceptedPortfolioSharesPages), arg0, arg1)
}

// ListAcceptedPortfolioSharesPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListAcceptedPortfolioSharesPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListAcceptedPortfolioSharesInput, arg2 func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAcceptedPortfolioSharesPagesWithContext indicates an expected call of ListAcceptedPortfolioSharesPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListAcceptedPortfolioSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioSharesPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListAcceptedPortfolioSharesPagesWithContext), varargs...)
}

// ListAcceptedPortfolioSharesRequest mocks base method
func (m *MockServiceCatalogAPI) ListAcceptedPortfolioSharesRequest(arg0 *servicecatalog.ListAcceptedPortfolioSharesInput) (*request.Request, *servicecatalog.ListAcceptedPortfolioSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	return ret0, ret1
}

// ListAcceptedPortfolioSharesRequest indicates an expected call of ListAcceptedPortfolioSharesRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListAcceptedPortfolioSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioSharesRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListAcceptedPortfolioSharesRequest), arg0)
}

// ListAcceptedPortfolioSharesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListAcceptedPortfolioSharesWithContext(arg0 context.Context, arg1 *servicecatalog.ListAcceptedPortfolioSharesInput, arg2 ...request.Option) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioSharesWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceptedPortfolioSharesWithContext indicates an expected call of ListAcceptedPortfolioSharesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListAcceptedPortfolioSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioSharesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListAcceptedPortfolioSharesWithContext), varargs...)
}

// ListBudgetsForResource mocks base method
func (m *MockServiceCatalogAPI) ListBudgetsForResource(arg0 *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgetsForResource", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListBudgetsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgetsForResource indicates an expected call of ListBudgetsForResource
func (mr *MockServiceCatalogAPIMockRecorder) ListBudgetsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResource", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListBudgetsForResource), arg0)
}

// ListBudgetsForResourcePages mocks base method
func (m *MockServiceCatalogAPI) ListBudgetsForResourcePages(arg0 *servicecatalog.ListBudgetsForResourceInput, arg1 func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgetsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBudgetsForResourcePages indicates an expected call of ListBudgetsForResourcePages
func (mr *MockServiceCatalogAPIMockRecorder) ListBudgetsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResourcePages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListBudgetsForResourcePages), arg0, arg1)
}

// ListBudgetsForResourcePagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListBudgetsForResourcePagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListBudgetsForResourceInput, arg2 func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBudgetsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBudgetsForResourcePagesWithContext indicates an expected call of ListBudgetsForResourcePagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListBudgetsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResourcePagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListBudgetsForResourcePagesWithContext), varargs...)
}

// ListBudgetsForResourceRequest mocks base method
func (m *MockServiceCatalogAPI) ListBudgetsForResourceRequest(arg0 *servicecatalog.ListBudgetsForResourceInput) (*request.Request, *servicecatalog.ListBudgetsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgetsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListBudgetsForResourceOutput)
	return ret0, ret1
}

// ListBudgetsForResourceRequest indicates an expected call of ListBudgetsForResourceRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListBudgetsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResourceRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListBudgetsForResourceRequest), arg0)
}

// ListBudgetsForResourceWithContext mocks base method
func (m *MockServiceCatalogAPI) ListBudgetsForResourceWithContext(arg0 context.Context, arg1 *servicecatalog.ListBudgetsForResourceInput, arg2 ...request.Option) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBudgetsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListBudgetsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgetsForResourceWithContext indicates an expected call of ListBudgetsForResourceWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListBudgetsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResourceWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListBudgetsForResourceWithContext), varargs...)
}

// ListConstraintsForPortfolio mocks base method
func (m *MockServiceCatalogAPI) ListConstraintsForPortfolio(arg0 *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListConstraintsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConstraintsForPortfolio indicates an expected call of ListConstraintsForPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) ListConstraintsForPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListConstraintsForPortfolio), arg0)
}

// ListConstraintsForPortfolioPages mocks base method
func (m *MockServiceCatalogAPI) ListConstraintsForPortfolioPages(arg0 *servicecatalog.ListConstraintsForPortfolioInput, arg1 func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolioPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConstraintsForPortfolioPages indicates an expected call of ListConstraintsForPortfolioPages
func (mr *MockServiceCatalogAPIMockRecorder) ListConstraintsForPortfolioPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolioPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListConstraintsForPortfolioPages), arg0, arg1)
}

// ListConstraintsForPortfolioPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListConstraintsForPortfolioPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListConstraintsForPortfolioInput, arg2 func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolioPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConstraintsForPortfolioPagesWithContext indicates an expected call of ListConstraintsForPortfolioPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListConstraintsForPortfolioPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolioPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListConstraintsForPortfolioPagesWithContext), varargs...)
}

// ListConstraintsForPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) ListConstraintsForPortfolioRequest(arg0 *servicecatalog.ListConstraintsForPortfolioInput) (*request.Request, *servicecatalog.ListConstraintsForPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListConstraintsForPortfolioOutput)
	return ret0, ret1
}

// ListConstraintsForPortfolioRequest indicates an expected call of ListConstraintsForPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListConstraintsForPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListConstraintsForPortfolioRequest), arg0)
}

// ListConstraintsForPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) ListConstraintsForPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.ListConstraintsForPortfolioInput, arg2 ...request.Option) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListConstraintsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConstraintsForPortfolioWithContext indicates an expected call of ListConstraintsForPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListConstraintsForPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListConstraintsForPortfolioWithContext), varargs...)
}

// ListLaunchPaths mocks base method
func (m *MockServiceCatalogAPI) ListLaunchPaths(arg0 *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchPaths", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListLaunchPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchPaths indicates an expected call of ListLaunchPaths
func (mr *MockServiceCatalogAPIMockRecorder) ListLaunchPaths(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPaths", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListLaunchPaths), arg0)
}

// ListLaunchPathsPages mocks base method
func (m *MockServiceCatalogAPI) ListLaunchPathsPages(arg0 *servicecatalog.ListLaunchPathsInput, arg1 func(*servicecatalog.ListLaunchPathsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchPathsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchPathsPages indicates an expected call of ListLaunchPathsPages
func (mr *MockServiceCatalogAPIMockRecorder) ListLaunchPathsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPathsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListLaunchPathsPages), arg0, arg1)
}

// ListLaunchPathsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListLaunchPathsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListLaunchPathsInput, arg2 func(*servicecatalog.ListLaunchPathsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchPathsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchPathsPagesWithContext indicates an expected call of ListLaunchPathsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListLaunchPathsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPathsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListLaunchPathsPagesWithContext), varargs...)
}

// ListLaunchPathsRequest mocks base method
func (m *MockServiceCatalogAPI) ListLaunchPathsRequest(arg0 *servicecatalog.ListLaunchPathsInput) (*request.Request, *servicecatalog.ListLaunchPathsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchPathsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListLaunchPathsOutput)
	return ret0, ret1
}

// ListLaunchPathsRequest indicates an expected call of ListLaunchPathsRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListLaunchPathsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPathsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListLaunchPathsRequest), arg0)
}

// ListLaunchPathsWithContext mocks base method
func (m *MockServiceCatalogAPI) ListLaunchPathsWithContext(arg0 context.Context, arg1 *servicecatalog.ListLaunchPathsInput, arg2 ...request.Option) (*servicecatalog.ListLaunchPathsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchPathsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListLaunchPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchPathsWithContext indicates an expected call of ListLaunchPathsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListLaunchPathsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPathsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListLaunchPathsWithContext), varargs...)
}

// ListOrganizationPortfolioAccess mocks base method
func (m *MockServiceCatalogAPI) ListOrganizationPortfolioAccess(arg0 *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccess", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationPortfolioAccess indicates an expected call of ListOrganizationPortfolioAccess
func (mr *MockServiceCatalogAPIMockRecorder) ListOrganizationPortfolioAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccess", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListOrganizationPortfolioAccess), arg0)
}

// ListOrganizationPortfolioAccessPages mocks base method
func (m *MockServiceCatalogAPI) ListOrganizationPortfolioAccessPages(arg0 *servicecatalog.ListOrganizationPortfolioAccessInput, arg1 func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccessPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationPortfolioAccessPages indicates an expected call of ListOrganizationPortfolioAccessPages
func (mr *MockServiceCatalogAPIMockRecorder) ListOrganizationPortfolioAccessPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccessPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListOrganizationPortfolioAccessPages), arg0, arg1)
}

// ListOrganizationPortfolioAccessPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListOrganizationPortfolioAccessPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListOrganizationPortfolioAccessInput, arg2 func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccessPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationPortfolioAccessPagesWithContext indicates an expected call of ListOrganizationPortfolioAccessPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListOrganizationPortfolioAccessPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccessPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListOrganizationPortfolioAccessPagesWithContext), varargs...)
}

// ListOrganizationPortfolioAccessRequest mocks base method
func (m *MockServiceCatalogAPI) ListOrganizationPortfolioAccessRequest(arg0 *servicecatalog.ListOrganizationPortfolioAccessInput) (*request.Request, *servicecatalog.ListOrganizationPortfolioAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	return ret0, ret1
}

// ListOrganizationPortfolioAccessRequest indicates an expected call of ListOrganizationPortfolioAccessRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListOrganizationPortfolioAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccessRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListOrganizationPortfolioAccessRequest), arg0)
}

// ListOrganizationPortfolioAccessWithContext mocks base method
func (m *MockServiceCatalogAPI) ListOrganizationPortfolioAccessWithContext(arg0 context.Context, arg1 *servicecatalog.ListOrganizationPortfolioAccessInput, arg2 ...request.Option) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccessWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationPortfolioAccessWithContext indicates an expected call of ListOrganizationPortfolioAccessWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListOrganizationPortfolioAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccessWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListOrganizationPortfolioAccessWithContext), varargs...)
}

// ListPortfolioAccess mocks base method
func (m *MockServiceCatalogAPI) ListPortfolioAccess(arg0 *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolioAccess", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolioAccess indicates an expected call of ListPortfolioAccess
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolioAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccess", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolioAccess), arg0)
}

// ListPortfolioAccessPages mocks base method
func (m *MockServiceCatalogAPI) ListPortfolioAccessPages(arg0 *servicecatalog.ListPortfolioAccessInput, arg1 func(*servicecatalog.ListPortfolioAccessOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolioAccessPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfolioAccessPages indicates an expected call of ListPortfolioAccessPages
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolioAccessPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccessPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolioAccessPages), arg0, arg1)
}

// ListPortfolioAccessPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfolioAccessPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfolioAccessInput, arg2 func(*servicecatalog.ListPortfolioAccessOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfolioAccessPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfolioAccessPagesWithContext indicates an expected call of ListPortfolioAccessPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolioAccessPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccessPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolioAccessPagesWithContext), varargs...)
}

// ListPortfolioAccessRequest mocks base method
func (m *MockServiceCatalogAPI) ListPortfolioAccessRequest(arg0 *servicecatalog.ListPortfolioAccessInput) (*request.Request, *servicecatalog.ListPortfolioAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolioAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListPortfolioAccessOutput)
	return ret0, ret1
}

// ListPortfolioAccessRequest indicates an expected call of ListPortfolioAccessRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolioAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccessRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolioAccessRequest), arg0)
}

// ListPortfolioAccessWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfolioAccessWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfolioAccessInput, arg2 ...request.Option) (*servicecatalog.ListPortfolioAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfolioAccessWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolioAccessWithContext indicates an expected call of ListPortfolioAccessWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolioAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccessWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolioAccessWithContext), varargs...)
}

// ListPortfolios mocks base method
func (m *MockServiceCatalogAPI) ListPortfolios(arg0 *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolios", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolios indicates an expected call of ListPortfolios
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfolios(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolios", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfolios), arg0)
}

// ListPortfoliosForProduct mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosForProduct(arg0 *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfoliosForProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfoliosForProduct indicates an expected call of ListPortfoliosForProduct
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosForProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosForProduct), arg0)
}

// ListPortfoliosForProductPages mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosForProductPages(arg0 *servicecatalog.ListPortfoliosForProductInput, arg1 func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfoliosForProductPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfoliosForProductPages indicates an expected call of ListPortfoliosForProductPages
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosForProductPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProductPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosForProductPages), arg0, arg1)
}

// ListPortfoliosForProductPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosForProductPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosForProductInput, arg2 func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfoliosForProductPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfoliosForProductPagesWithContext indicates an expected call of ListPortfoliosForProductPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosForProductPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProductPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosForProductPagesWithContext), varargs...)
}

// ListPortfoliosForProductRequest mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosForProductRequest(arg0 *servicecatalog.ListPortfoliosForProductInput) (*request.Request, *servicecatalog.ListPortfoliosForProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfoliosForProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListPortfoliosForProductOutput)
	return ret0, ret1
}

// ListPortfoliosForProductRequest indicates an expected call of ListPortfoliosForProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosForProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosForProductRequest), arg0)
}

// ListPortfoliosForProductWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosForProductWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosForProductInput, arg2 ...request.Option) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfoliosForProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfoliosForProductWithContext indicates an expected call of ListPortfoliosForProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosForProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosForProductWithContext), varargs...)
}

// ListPortfoliosPages mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosPages(arg0 *servicecatalog.ListPortfoliosInput, arg1 func(*servicecatalog.ListPortfoliosOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfoliosPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfoliosPages indicates an expected call of ListPortfoliosPages
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosPages), arg0, arg1)
}

// ListPortfoliosPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosInput, arg2 func(*servicecatalog.ListPortfoliosOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfoliosPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortfoliosPagesWithContext indicates an expected call of ListPortfoliosPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosPagesWithContext), varargs...)
}

// ListPortfoliosRequest mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosRequest(arg0 *servicecatalog.ListPortfoliosInput) (*request.Request, *servicecatalog.ListPortfoliosOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfoliosRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListPortfoliosOutput)
	return ret0, ret1
}

// ListPortfoliosRequest indicates an expected call of ListPortfoliosRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosRequest), arg0)
}

// ListPortfoliosWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPortfoliosWithContext(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosInput, arg2 ...request.Option) (*servicecatalog.ListPortfoliosOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfoliosWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfoliosWithContext indicates an expected call of ListPortfoliosWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPortfoliosWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPortfoliosWithContext), varargs...)
}

// ListPrincipalsForPortfolio mocks base method
func (m *MockServiceCatalogAPI) ListPrincipalsForPortfolio(arg0 *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalsForPortfolio indicates an expected call of ListPrincipalsForPortfolio
func (mr *MockServiceCatalogAPIMockRecorder) ListPrincipalsForPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPrincipalsForPortfolio), arg0)
}

// ListPrincipalsForPortfolioPages mocks base method
func (m *MockServiceCatalogAPI) ListPrincipalsForPortfolioPages(arg0 *servicecatalog.ListPrincipalsForPortfolioInput, arg1 func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolioPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrincipalsForPortfolioPages indicates an expected call of ListPrincipalsForPortfolioPages
func (mr *MockServiceCatalogAPIMockRecorder) ListPrincipalsForPortfolioPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolioPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPrincipalsForPortfolioPages), arg0, arg1)
}

// ListPrincipalsForPortfolioPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPrincipalsForPortfolioPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListPrincipalsForPortfolioInput, arg2 func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolioPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrincipalsForPortfolioPagesWithContext indicates an expected call of ListPrincipalsForPortfolioPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPrincipalsForPortfolioPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolioPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPrincipalsForPortfolioPagesWithContext), varargs...)
}

// ListPrincipalsForPortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) ListPrincipalsForPortfolioRequest(arg0 *servicecatalog.ListPrincipalsForPortfolioInput) (*request.Request, *servicecatalog.ListPrincipalsForPortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	return ret0, ret1
}

// ListPrincipalsForPortfolioRequest indicates an expected call of ListPrincipalsForPortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListPrincipalsForPortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPrincipalsForPortfolioRequest), arg0)
}

// ListPrincipalsForPortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) ListPrincipalsForPortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.ListPrincipalsForPortfolioInput, arg2 ...request.Option) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalsForPortfolioWithContext indicates an expected call of ListPrincipalsForPortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListPrincipalsForPortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListPrincipalsForPortfolioWithContext), varargs...)
}

// ListProvisionedProductPlans mocks base method
func (m *MockServiceCatalogAPI) ListProvisionedProductPlans(arg0 *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisionedProductPlans", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListProvisionedProductPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisionedProductPlans indicates an expected call of ListProvisionedProductPlans
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisionedProductPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedProductPlans", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisionedProductPlans), arg0)
}

// ListProvisionedProductPlansRequest mocks base method
func (m *MockServiceCatalogAPI) ListProvisionedProductPlansRequest(arg0 *servicecatalog.ListProvisionedProductPlansInput) (*request.Request, *servicecatalog.ListProvisionedProductPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisionedProductPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListProvisionedProductPlansOutput)
	return ret0, ret1
}

// ListProvisionedProductPlansRequest indicates an expected call of ListProvisionedProductPlansRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisionedProductPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedProductPlansRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisionedProductPlansRequest), arg0)
}

// ListProvisionedProductPlansWithContext mocks base method
func (m *MockServiceCatalogAPI) ListProvisionedProductPlansWithContext(arg0 context.Context, arg1 *servicecatalog.ListProvisionedProductPlansInput, arg2 ...request.Option) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisionedProductPlansWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisionedProductPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisionedProductPlansWithContext indicates an expected call of ListProvisionedProductPlansWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisionedProductPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedProductPlansWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisionedProductPlansWithContext), varargs...)
}

// ListProvisioningArtifacts mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifacts(arg0 *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisioningArtifacts", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifacts indicates an expected call of ListProvisioningArtifacts
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifacts", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifacts), arg0)
}

// ListProvisioningArtifactsForServiceAction mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsForServiceAction(arg0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifactsForServiceAction indicates an expected call of ListProvisioningArtifactsForServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsForServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsForServiceAction), arg0)
}

// ListProvisioningArtifactsForServiceActionPages mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsForServiceActionPages(arg0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, arg1 func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceActionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProvisioningArtifactsForServiceActionPages indicates an expected call of ListProvisioningArtifactsForServiceActionPages
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsForServiceActionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceActionPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsForServiceActionPages), arg0, arg1)
}

// ListProvisioningArtifactsForServiceActionPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsForServiceActionPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, arg2 func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceActionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProvisioningArtifactsForServiceActionPagesWithContext indicates an expected call of ListProvisioningArtifactsForServiceActionPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsForServiceActionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceActionPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsForServiceActionPagesWithContext), varargs...)
}

// ListProvisioningArtifactsForServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsForServiceActionRequest(arg0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*request.Request, *servicecatalog.ListProvisioningArtifactsForServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	return ret0, ret1
}

// ListProvisioningArtifactsForServiceActionRequest indicates an expected call of ListProvisioningArtifactsForServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsForServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsForServiceActionRequest), arg0)
}

// ListProvisioningArtifactsForServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsForServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, arg2 ...request.Option) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifactsForServiceActionWithContext indicates an expected call of ListProvisioningArtifactsForServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsForServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsForServiceActionWithContext), varargs...)
}

// ListProvisioningArtifactsRequest mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsRequest(arg0 *servicecatalog.ListProvisioningArtifactsInput) (*request.Request, *servicecatalog.ListProvisioningArtifactsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListProvisioningArtifactsOutput)
	return ret0, ret1
}

// ListProvisioningArtifactsRequest indicates an expected call of ListProvisioningArtifactsRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsRequest), arg0)
}

// ListProvisioningArtifactsWithContext mocks base method
func (m *MockServiceCatalogAPI) ListProvisioningArtifactsWithContext(arg0 context.Context, arg1 *servicecatalog.ListProvisioningArtifactsInput, arg2 ...request.Option) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifactsWithContext indicates an expected call of ListProvisioningArtifactsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListProvisioningArtifactsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListProvisioningArtifactsWithContext), varargs...)
}

// ListRecordHistory mocks base method
func (m *MockServiceCatalogAPI) ListRecordHistory(arg0 *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordHistory", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListRecordHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordHistory indicates an expected call of ListRecordHistory
func (mr *MockServiceCatalogAPIMockRecorder) ListRecordHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordHistory", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListRecordHistory), arg0)
}

// ListRecordHistoryRequest mocks base method
func (m *MockServiceCatalogAPI) ListRecordHistoryRequest(arg0 *servicecatalog.ListRecordHistoryInput) (*request.Request, *servicecatalog.ListRecordHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListRecordHistoryOutput)
	return ret0, ret1
}

// ListRecordHistoryRequest indicates an expected call of ListRecordHistoryRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListRecordHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordHistoryRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListRecordHistoryRequest), arg0)
}

// ListRecordHistoryWithContext mocks base method
func (m *MockServiceCatalogAPI) ListRecordHistoryWithContext(arg0 context.Context, arg1 *servicecatalog.ListRecordHistoryInput, arg2 ...request.Option) (*servicecatalog.ListRecordHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecordHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListRecordHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordHistoryWithContext indicates an expected call of ListRecordHistoryWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListRecordHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordHistoryWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListRecordHistoryWithContext), varargs...)
}

// ListResourcesForTagOption mocks base method
func (m *MockServiceCatalogAPI) ListResourcesForTagOption(arg0 *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForTagOption", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListResourcesForTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForTagOption indicates an expected call of ListResourcesForTagOption
func (mr *MockServiceCatalogAPIMockRecorder) ListResourcesForTagOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOption", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListResourcesForTagOption), arg0)
}

// ListResourcesForTagOptionPages mocks base method
func (m *MockServiceCatalogAPI) ListResourcesForTagOptionPages(arg0 *servicecatalog.ListResourcesForTagOptionInput, arg1 func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForTagOptionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesForTagOptionPages indicates an expected call of ListResourcesForTagOptionPages
func (mr *MockServiceCatalogAPIMockRecorder) ListResourcesForTagOptionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOptionPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListResourcesForTagOptionPages), arg0, arg1)
}

// ListResourcesForTagOptionPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListResourcesForTagOptionPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListResourcesForTagOptionInput, arg2 func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesForTagOptionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesForTagOptionPagesWithContext indicates an expected call of ListResourcesForTagOptionPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListResourcesForTagOptionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOptionPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListResourcesForTagOptionPagesWithContext), varargs...)
}

// ListResourcesForTagOptionRequest mocks base method
func (m *MockServiceCatalogAPI) ListResourcesForTagOptionRequest(arg0 *servicecatalog.ListResourcesForTagOptionInput) (*request.Request, *servicecatalog.ListResourcesForTagOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForTagOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListResourcesForTagOptionOutput)
	return ret0, ret1
}

// ListResourcesForTagOptionRequest indicates an expected call of ListResourcesForTagOptionRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListResourcesForTagOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOptionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListResourcesForTagOptionRequest), arg0)
}

// ListResourcesForTagOptionWithContext mocks base method
func (m *MockServiceCatalogAPI) ListResourcesForTagOptionWithContext(arg0 context.Context, arg1 *servicecatalog.ListResourcesForTagOptionInput, arg2 ...request.Option) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesForTagOptionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListResourcesForTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForTagOptionWithContext indicates an expected call of ListResourcesForTagOptionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListResourcesForTagOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOptionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListResourcesForTagOptionWithContext), varargs...)
}

// ListServiceActions mocks base method
func (m *MockServiceCatalogAPI) ListServiceActions(arg0 *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActions", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActions indicates an expected call of ListServiceActions
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActions", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActions), arg0)
}

// ListServiceActionsForProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsForProvisioningArtifact(arg0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActionsForProvisioningArtifact indicates an expected call of ListServiceActionsForProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsForProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsForProvisioningArtifact), arg0)
}

// ListServiceActionsForProvisioningArtifactPages mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsForProvisioningArtifactPages(arg0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, arg1 func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifactPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceActionsForProvisioningArtifactPages indicates an expected call of ListServiceActionsForProvisioningArtifactPages
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsForProvisioningArtifactPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifactPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsForProvisioningArtifactPages), arg0, arg1)
}

// ListServiceActionsForProvisioningArtifactPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsForProvisioningArtifactPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, arg2 func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifactPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceActionsForProvisioningArtifactPagesWithContext indicates an expected call of ListServiceActionsForProvisioningArtifactPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsForProvisioningArtifactPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifactPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsForProvisioningArtifactPagesWithContext), varargs...)
}

// ListServiceActionsForProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsForProvisioningArtifactRequest(arg0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*request.Request, *servicecatalog.ListServiceActionsForProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	return ret0, ret1
}

// ListServiceActionsForProvisioningArtifactRequest indicates an expected call of ListServiceActionsForProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsForProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsForProvisioningArtifactRequest), arg0)
}

// ListServiceActionsForProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsForProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActionsForProvisioningArtifactWithContext indicates an expected call of ListServiceActionsForProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsForProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsForProvisioningArtifactWithContext), varargs...)
}

// ListServiceActionsPages mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsPages(arg0 *servicecatalog.ListServiceActionsInput, arg1 func(*servicecatalog.ListServiceActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceActionsPages indicates an expected call of ListServiceActionsPages
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsPages), arg0, arg1)
}

// ListServiceActionsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsInput, arg2 func(*servicecatalog.ListServiceActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceActionsPagesWithContext indicates an expected call of ListServiceActionsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsPagesWithContext), varargs...)
}

// ListServiceActionsRequest mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsRequest(arg0 *servicecatalog.ListServiceActionsInput) (*request.Request, *servicecatalog.ListServiceActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListServiceActionsOutput)
	return ret0, ret1
}

// ListServiceActionsRequest indicates an expected call of ListServiceActionsRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsRequest), arg0)
}

// ListServiceActionsWithContext mocks base method
func (m *MockServiceCatalogAPI) ListServiceActionsWithContext(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsInput, arg2 ...request.Option) (*servicecatalog.ListServiceActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActionsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActionsWithContext indicates an expected call of ListServiceActionsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListServiceActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListServiceActionsWithContext), varargs...)
}

// ListStackInstancesForProvisionedProduct mocks base method
func (m *MockServiceCatalogAPI) ListStackInstancesForProvisionedProduct(arg0 *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackInstancesForProvisionedProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstancesForProvisionedProduct indicates an expected call of ListStackInstancesForProvisionedProduct
func (mr *MockServiceCatalogAPIMockRecorder) ListStackInstancesForProvisionedProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstancesForProvisionedProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListStackInstancesForProvisionedProduct), arg0)
}

// ListStackInstancesForProvisionedProductRequest mocks base method
func (m *MockServiceCatalogAPI) ListStackInstancesForProvisionedProductRequest(arg0 *servicecatalog.ListStackInstancesForProvisionedProductInput) (*request.Request, *servicecatalog.ListStackInstancesForProvisionedProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackInstancesForProvisionedProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	return ret0, ret1
}

// ListStackInstancesForProvisionedProductRequest indicates an expected call of ListStackInstancesForProvisionedProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListStackInstancesForProvisionedProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstancesForProvisionedProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListStackInstancesForProvisionedProductRequest), arg0)
}

// ListStackInstancesForProvisionedProductWithContext mocks base method
func (m *MockServiceCatalogAPI) ListStackInstancesForProvisionedProductWithContext(arg0 context.Context, arg1 *servicecatalog.ListStackInstancesForProvisionedProductInput, arg2 ...request.Option) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstancesForProvisionedProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstancesForProvisionedProductWithContext indicates an expected call of ListStackInstancesForProvisionedProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListStackInstancesForProvisionedProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstancesForProvisionedProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListStackInstancesForProvisionedProductWithContext), varargs...)
}

// ListTagOptions mocks base method
func (m *MockServiceCatalogAPI) ListTagOptions(arg0 *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagOptions", arg0)
	ret0, _ := ret[0].(*servicecatalog.ListTagOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagOptions indicates an expected call of ListTagOptions
func (mr *MockServiceCatalogAPIMockRecorder) ListTagOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptions", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListTagOptions), arg0)
}

// ListTagOptionsPages mocks base method
func (m *MockServiceCatalogAPI) ListTagOptionsPages(arg0 *servicecatalog.ListTagOptionsInput, arg1 func(*servicecatalog.ListTagOptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagOptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagOptionsPages indicates an expected call of ListTagOptionsPages
func (mr *MockServiceCatalogAPIMockRecorder) ListTagOptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptionsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListTagOptionsPages), arg0, arg1)
}

// ListTagOptionsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) ListTagOptionsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.ListTagOptionsInput, arg2 func(*servicecatalog.ListTagOptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagOptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagOptionsPagesWithContext indicates an expected call of ListTagOptionsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListTagOptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptionsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListTagOptionsPagesWithContext), varargs...)
}

// ListTagOptionsRequest mocks base method
func (m *MockServiceCatalogAPI) ListTagOptionsRequest(arg0 *servicecatalog.ListTagOptionsInput) (*request.Request, *servicecatalog.ListTagOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ListTagOptionsOutput)
	return ret0, ret1
}

// ListTagOptionsRequest indicates an expected call of ListTagOptionsRequest
func (mr *MockServiceCatalogAPIMockRecorder) ListTagOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptionsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListTagOptionsRequest), arg0)
}

// ListTagOptionsWithContext mocks base method
func (m *MockServiceCatalogAPI) ListTagOptionsWithContext(arg0 context.Context, arg1 *servicecatalog.ListTagOptionsInput, arg2 ...request.Option) (*servicecatalog.ListTagOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListTagOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagOptionsWithContext indicates an expected call of ListTagOptionsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ListTagOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptionsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ListTagOptionsWithContext), varargs...)
}

// ProvisionProduct mocks base method
func (m *MockServiceCatalogAPI) ProvisionProduct(arg0 *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.ProvisionProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionProduct indicates an expected call of ProvisionProduct
func (mr *MockServiceCatalogAPIMockRecorder) ProvisionProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ProvisionProduct), arg0)
}

// ProvisionProductRequest mocks base method
func (m *MockServiceCatalogAPI) ProvisionProductRequest(arg0 *servicecatalog.ProvisionProductInput) (*request.Request, *servicecatalog.ProvisionProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ProvisionProductOutput)
	return ret0, ret1
}

// ProvisionProductRequest indicates an expected call of ProvisionProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) ProvisionProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ProvisionProductRequest), arg0)
}

// ProvisionProductWithContext mocks base method
func (m *MockServiceCatalogAPI) ProvisionProductWithContext(arg0 context.Context, arg1 *servicecatalog.ProvisionProductInput, arg2 ...request.Option) (*servicecatalog.ProvisionProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ProvisionProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionProductWithContext indicates an expected call of ProvisionProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ProvisionProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ProvisionProductWithContext), varargs...)
}

// RejectPortfolioShare mocks base method
func (m *MockServiceCatalogAPI) RejectPortfolioShare(arg0 *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectPortfolioShare", arg0)
	ret0, _ := ret[0].(*servicecatalog.RejectPortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectPortfolioShare indicates an expected call of RejectPortfolioShare
func (mr *MockServiceCatalogAPIMockRecorder) RejectPortfolioShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPortfolioShare", reflect.TypeOf((*MockServiceCatalogAPI)(nil).RejectPortfolioShare), arg0)
}

// RejectPortfolioShareRequest mocks base method
func (m *MockServiceCatalogAPI) RejectPortfolioShareRequest(arg0 *servicecatalog.RejectPortfolioShareInput) (*request.Request, *servicecatalog.RejectPortfolioShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectPortfolioShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.RejectPortfolioShareOutput)
	return ret0, ret1
}

// RejectPortfolioShareRequest indicates an expected call of RejectPortfolioShareRequest
func (mr *MockServiceCatalogAPIMockRecorder) RejectPortfolioShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPortfolioShareRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).RejectPortfolioShareRequest), arg0)
}

// RejectPortfolioShareWithContext mocks base method
func (m *MockServiceCatalogAPI) RejectPortfolioShareWithContext(arg0 context.Context, arg1 *servicecatalog.RejectPortfolioShareInput, arg2 ...request.Option) (*servicecatalog.RejectPortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectPortfolioShareWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.RejectPortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectPortfolioShareWithContext indicates an expected call of RejectPortfolioShareWithContext
func (mr *MockServiceCatalogAPIMockRecorder) RejectPortfolioShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPortfolioShareWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).RejectPortfolioShareWithContext), varargs...)
}

// ScanProvisionedProducts mocks base method
func (m *MockServiceCatalogAPI) ScanProvisionedProducts(arg0 *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanProvisionedProducts", arg0)
	ret0, _ := ret[0].(*servicecatalog.ScanProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanProvisionedProducts indicates an expected call of ScanProvisionedProducts
func (mr *MockServiceCatalogAPIMockRecorder) ScanProvisionedProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanProvisionedProducts", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ScanProvisionedProducts), arg0)
}

// ScanProvisionedProductsRequest mocks base method
func (m *MockServiceCatalogAPI) ScanProvisionedProductsRequest(arg0 *servicecatalog.ScanProvisionedProductsInput) (*request.Request, *servicecatalog.ScanProvisionedProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanProvisionedProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.ScanProvisionedProductsOutput)
	return ret0, ret1
}

// ScanProvisionedProductsRequest indicates an expected call of ScanProvisionedProductsRequest
func (mr *MockServiceCatalogAPIMockRecorder) ScanProvisionedProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanProvisionedProductsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ScanProvisionedProductsRequest), arg0)
}

// ScanProvisionedProductsWithContext mocks base method
func (m *MockServiceCatalogAPI) ScanProvisionedProductsWithContext(arg0 context.Context, arg1 *servicecatalog.ScanProvisionedProductsInput, arg2 ...request.Option) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanProvisionedProductsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ScanProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanProvisionedProductsWithContext indicates an expected call of ScanProvisionedProductsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) ScanProvisionedProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanProvisionedProductsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).ScanProvisionedProductsWithContext), varargs...)
}

// SearchProducts mocks base method
func (m *MockServiceCatalogAPI) SearchProducts(arg0 *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", arg0)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts
func (mr *MockServiceCatalogAPIMockRecorder) SearchProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProducts), arg0)
}

// SearchProductsAsAdmin mocks base method
func (m *MockServiceCatalogAPI) SearchProductsAsAdmin(arg0 *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsAsAdmin", arg0)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsAsAdmin indicates an expected call of SearchProductsAsAdmin
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsAsAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdmin", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsAsAdmin), arg0)
}

// SearchProductsAsAdminPages mocks base method
func (m *MockServiceCatalogAPI) SearchProductsAsAdminPages(arg0 *servicecatalog.SearchProductsAsAdminInput, arg1 func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsAsAdminPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProductsAsAdminPages indicates an expected call of SearchProductsAsAdminPages
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsAsAdminPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdminPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsAsAdminPages), arg0, arg1)
}

// SearchProductsAsAdminPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProductsAsAdminPagesWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProductsAsAdminInput, arg2 func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsAsAdminPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProductsAsAdminPagesWithContext indicates an expected call of SearchProductsAsAdminPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsAsAdminPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdminPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsAsAdminPagesWithContext), varargs...)
}

// SearchProductsAsAdminRequest mocks base method
func (m *MockServiceCatalogAPI) SearchProductsAsAdminRequest(arg0 *servicecatalog.SearchProductsAsAdminInput) (*request.Request, *servicecatalog.SearchProductsAsAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsAsAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.SearchProductsAsAdminOutput)
	return ret0, ret1
}

// SearchProductsAsAdminRequest indicates an expected call of SearchProductsAsAdminRequest
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsAsAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdminRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsAsAdminRequest), arg0)
}

// SearchProductsAsAdminWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProductsAsAdminWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProductsAsAdminInput, arg2 ...request.Option) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsAsAdminWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsAsAdminWithContext indicates an expected call of SearchProductsAsAdminWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsAsAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdminWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsAsAdminWithContext), varargs...)
}

// SearchProductsPages mocks base method
func (m *MockServiceCatalogAPI) SearchProductsPages(arg0 *servicecatalog.SearchProductsInput, arg1 func(*servicecatalog.SearchProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProductsPages indicates an expected call of SearchProductsPages
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsPages), arg0, arg1)
}

// SearchProductsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProductsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProductsInput, arg2 func(*servicecatalog.SearchProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProductsPagesWithContext indicates an expected call of SearchProductsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsPagesWithContext), varargs...)
}

// SearchProductsRequest mocks base method
func (m *MockServiceCatalogAPI) SearchProductsRequest(arg0 *servicecatalog.SearchProductsInput) (*request.Request, *servicecatalog.SearchProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.SearchProductsOutput)
	return ret0, ret1
}

// SearchProductsRequest indicates an expected call of SearchProductsRequest
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsRequest), arg0)
}

// SearchProductsWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProductsWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProductsInput, arg2 ...request.Option) (*servicecatalog.SearchProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsWithContext indicates an expected call of SearchProductsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProductsWithContext), varargs...)
}

// SearchProvisionedProducts mocks base method
func (m *MockServiceCatalogAPI) SearchProvisionedProducts(arg0 *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProvisionedProducts", arg0)
	ret0, _ := ret[0].(*servicecatalog.SearchProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProvisionedProducts indicates an expected call of SearchProvisionedProducts
func (mr *MockServiceCatalogAPIMockRecorder) SearchProvisionedProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProducts", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProvisionedProducts), arg0)
}

// SearchProvisionedProductsPages mocks base method
func (m *MockServiceCatalogAPI) SearchProvisionedProductsPages(arg0 *servicecatalog.SearchProvisionedProductsInput, arg1 func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProvisionedProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProvisionedProductsPages indicates an expected call of SearchProvisionedProductsPages
func (mr *MockServiceCatalogAPIMockRecorder) SearchProvisionedProductsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProductsPages", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProvisionedProductsPages), arg0, arg1)
}

// SearchProvisionedProductsPagesWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProvisionedProductsPagesWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProvisionedProductsInput, arg2 func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProvisionedProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProvisionedProductsPagesWithContext indicates an expected call of SearchProvisionedProductsPagesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProvisionedProductsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProductsPagesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProvisionedProductsPagesWithContext), varargs...)
}

// SearchProvisionedProductsRequest mocks base method
func (m *MockServiceCatalogAPI) SearchProvisionedProductsRequest(arg0 *servicecatalog.SearchProvisionedProductsInput) (*request.Request, *servicecatalog.SearchProvisionedProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProvisionedProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.SearchProvisionedProductsOutput)
	return ret0, ret1
}

// SearchProvisionedProductsRequest indicates an expected call of SearchProvisionedProductsRequest
func (mr *MockServiceCatalogAPIMockRecorder) SearchProvisionedProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProductsRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProvisionedProductsRequest), arg0)
}

// SearchProvisionedProductsWithContext mocks base method
func (m *MockServiceCatalogAPI) SearchProvisionedProductsWithContext(arg0 context.Context, arg1 *servicecatalog.SearchProvisionedProductsInput, arg2 ...request.Option) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProvisionedProductsWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProvisionedProductsWithContext indicates an expected call of SearchProvisionedProductsWithContext
func (mr *MockServiceCatalogAPIMockRecorder) SearchProvisionedProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProductsWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).SearchProvisionedProductsWithContext), varargs...)
}

// TerminateProvisionedProduct mocks base method
func (m *MockServiceCatalogAPI) TerminateProvisionedProduct(arg0 *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateProvisionedProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.TerminateProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateProvisionedProduct indicates an expected call of TerminateProvisionedProduct
func (mr *MockServiceCatalogAPIMockRecorder) TerminateProvisionedProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProvisionedProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).TerminateProvisionedProduct), arg0)
}

// TerminateProvisionedProductRequest mocks base method
func (m *MockServiceCatalogAPI) TerminateProvisionedProductRequest(arg0 *servicecatalog.TerminateProvisionedProductInput) (*request.Request, *servicecatalog.TerminateProvisionedProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateProvisionedProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.TerminateProvisionedProductOutput)
	return ret0, ret1
}

// TerminateProvisionedProductRequest indicates an expected call of TerminateProvisionedProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) TerminateProvisionedProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProvisionedProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).TerminateProvisionedProductRequest), arg0)
}

// TerminateProvisionedProductWithContext mocks base method
func (m *MockServiceCatalogAPI) TerminateProvisionedProductWithContext(arg0 context.Context, arg1 *servicecatalog.TerminateProvisionedProductInput, arg2 ...request.Option) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateProvisionedProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.TerminateProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateProvisionedProductWithContext indicates an expected call of TerminateProvisionedProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) TerminateProvisionedProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProvisionedProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).TerminateProvisionedProductWithContext), varargs...)
}

// UpdateConstraint mocks base method
func (m *MockServiceCatalogAPI) UpdateConstraint(arg0 *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConstraint", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConstraint indicates an expected call of UpdateConstraint
func (mr *MockServiceCatalogAPIMockRecorder) UpdateConstraint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConstraint", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateConstraint), arg0)
}

// UpdateConstraintRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateConstraintRequest(arg0 *servicecatalog.UpdateConstraintInput) (*request.Request, *servicecatalog.UpdateConstraintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConstraintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateConstraintOutput)
	return ret0, ret1
}

// UpdateConstraintRequest indicates an expected call of UpdateConstraintRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateConstraintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConstraintRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateConstraintRequest), arg0)
}

// UpdateConstraintWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateConstraintWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateConstraintInput, arg2 ...request.Option) (*servicecatalog.UpdateConstraintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConstraintWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConstraintWithContext indicates an expected call of UpdateConstraintWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateConstraintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConstraintWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateConstraintWithContext), varargs...)
}

// UpdatePortfolio mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolio(arg0 *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolio", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdatePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolio indicates an expected call of UpdatePortfolio
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolio", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolio), arg0)
}

// UpdatePortfolioRequest mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolioRequest(arg0 *servicecatalog.UpdatePortfolioInput) (*request.Request, *servicecatalog.UpdatePortfolioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdatePortfolioOutput)
	return ret0, ret1
}

// UpdatePortfolioRequest indicates an expected call of UpdatePortfolioRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolioRequest), arg0)
}

// UpdatePortfolioShare mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolioShare(arg0 *servicecatalog.UpdatePortfolioShareInput) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolioShare", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdatePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolioShare indicates an expected call of UpdatePortfolioShare
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolioShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioShare", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolioShare), arg0)
}

// UpdatePortfolioShareRequest mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolioShareRequest(arg0 *servicecatalog.UpdatePortfolioShareInput) (*request.Request, *servicecatalog.UpdatePortfolioShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolioShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdatePortfolioShareOutput)
	return ret0, ret1
}

// UpdatePortfolioShareRequest indicates an expected call of UpdatePortfolioShareRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolioShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioShareRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolioShareRequest), arg0)
}

// UpdatePortfolioShareWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolioShareWithContext(arg0 context.Context, arg1 *servicecatalog.UpdatePortfolioShareInput, arg2 ...request.Option) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortfolioShareWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdatePortfolioShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolioShareWithContext indicates an expected call of UpdatePortfolioShareWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolioShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioShareWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolioShareWithContext), varargs...)
}

// UpdatePortfolioWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdatePortfolioWithContext(arg0 context.Context, arg1 *servicecatalog.UpdatePortfolioInput, arg2 ...request.Option) (*servicecatalog.UpdatePortfolioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortfolioWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdatePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolioWithContext indicates an expected call of UpdatePortfolioWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdatePortfolioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdatePortfolioWithContext), varargs...)
}

// UpdateProduct mocks base method
func (m *MockServiceCatalogAPI) UpdateProduct(arg0 *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProduct), arg0)
}

// UpdateProductRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateProductRequest(arg0 *servicecatalog.UpdateProductInput) (*request.Request, *servicecatalog.UpdateProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateProductOutput)
	return ret0, ret1
}

// UpdateProductRequest indicates an expected call of UpdateProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProductRequest), arg0)
}

// UpdateProductWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateProductWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateProductInput, arg2 ...request.Option) (*servicecatalog.UpdateProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductWithContext indicates an expected call of UpdateProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProductWithContext), varargs...)
}

// UpdateProvisionedProduct mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProduct(arg0 *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedProduct", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedProduct indicates an expected call of UpdateProvisionedProduct
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProduct", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProduct), arg0)
}

// UpdateProvisionedProductProperties mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProductProperties(arg0 *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedProductProperties", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedProductProperties indicates an expected call of UpdateProvisionedProductProperties
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProductProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProductProperties", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProductProperties), arg0)
}

// UpdateProvisionedProductPropertiesRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProductPropertiesRequest(arg0 *servicecatalog.UpdateProvisionedProductPropertiesInput) (*request.Request, *servicecatalog.UpdateProvisionedProductPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedProductPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	return ret0, ret1
}

// UpdateProvisionedProductPropertiesRequest indicates an expected call of UpdateProvisionedProductPropertiesRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProductPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProductPropertiesRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProductPropertiesRequest), arg0)
}

// UpdateProvisionedProductPropertiesWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProductPropertiesWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateProvisionedProductPropertiesInput, arg2 ...request.Option) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProvisionedProductPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedProductPropertiesWithContext indicates an expected call of UpdateProvisionedProductPropertiesWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProductPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProductPropertiesWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProductPropertiesWithContext), varargs...)
}

// UpdateProvisionedProductRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProductRequest(arg0 *servicecatalog.UpdateProvisionedProductInput) (*request.Request, *servicecatalog.UpdateProvisionedProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateProvisionedProductOutput)
	return ret0, ret1
}

// UpdateProvisionedProductRequest indicates an expected call of UpdateProvisionedProductRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProductRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProductRequest), arg0)
}

// UpdateProvisionedProductWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisionedProductWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateProvisionedProductInput, arg2 ...request.Option) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProvisionedProductWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedProductWithContext indicates an expected call of UpdateProvisionedProductWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisionedProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedProductWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisionedProductWithContext), varargs...)
}

// UpdateProvisioningArtifact mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisioningArtifact(arg0 *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisioningArtifact", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisioningArtifact indicates an expected call of UpdateProvisioningArtifact
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisioningArtifact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisioningArtifact", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisioningArtifact), arg0)
}

// UpdateProvisioningArtifactRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisioningArtifactRequest(arg0 *servicecatalog.UpdateProvisioningArtifactInput) (*request.Request, *servicecatalog.UpdateProvisioningArtifactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisioningArtifactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateProvisioningArtifactOutput)
	return ret0, ret1
}

// UpdateProvisioningArtifactRequest indicates an expected call of UpdateProvisioningArtifactRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisioningArtifactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisioningArtifactRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisioningArtifactRequest), arg0)
}

// UpdateProvisioningArtifactWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateProvisioningArtifactWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateProvisioningArtifactInput, arg2 ...request.Option) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProvisioningArtifactWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisioningArtifactWithContext indicates an expected call of UpdateProvisioningArtifactWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateProvisioningArtifactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisioningArtifactWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateProvisioningArtifactWithContext), varargs...)
}

// UpdateServiceAction mocks base method
func (m *MockServiceCatalogAPI) UpdateServiceAction(arg0 *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAction", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAction indicates an expected call of UpdateServiceAction
func (mr *MockServiceCatalogAPIMockRecorder) UpdateServiceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAction", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateServiceAction), arg0)
}

// UpdateServiceActionRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateServiceActionRequest(arg0 *servicecatalog.UpdateServiceActionInput) (*request.Request, *servicecatalog.UpdateServiceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateServiceActionOutput)
	return ret0, ret1
}

// UpdateServiceActionRequest indicates an expected call of UpdateServiceActionRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateServiceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceActionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateServiceActionRequest), arg0)
}

// UpdateServiceActionWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateServiceActionWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateServiceActionInput, arg2 ...request.Option) (*servicecatalog.UpdateServiceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceActionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceActionWithContext indicates an expected call of UpdateServiceActionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateServiceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceActionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateServiceActionWithContext), varargs...)
}

// UpdateTagOption mocks base method
func (m *MockServiceCatalogAPI) UpdateTagOption(arg0 *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagOption", arg0)
	ret0, _ := ret[0].(*servicecatalog.UpdateTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTagOption indicates an expected call of UpdateTagOption
func (mr *MockServiceCatalogAPIMockRecorder) UpdateTagOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagOption", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateTagOption), arg0)
}

// UpdateTagOptionRequest mocks base method
func (m *MockServiceCatalogAPI) UpdateTagOptionRequest(arg0 *servicecatalog.UpdateTagOptionInput) (*request.Request, *servicecatalog.UpdateTagOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*servicecatalog.UpdateTagOptionOutput)
	return ret0, ret1
}

// UpdateTagOptionRequest indicates an expected call of UpdateTagOptionRequest
func (mr *MockServiceCatalogAPIMockRecorder) UpdateTagOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagOptionRequest", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateTagOptionRequest), arg0)
}

// UpdateTagOptionWithContext mocks base method
func (m *MockServiceCatalogAPI) UpdateTagOptionWithContext(arg0 context.Context, arg1 *servicecatalog.UpdateTagOptionInput, arg2 ...request.Option) (*servicecatalog.UpdateTagOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTagOptionWithContext", varargs...)
	ret0, _ := ret[0].(*servicecatalog.UpdateTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTagOptionWithContext indicates an expected call of UpdateTagOptionWithContext
func (mr *MockServiceCatalogAPIMockRecorder) UpdateTagOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagOptionWithContext", reflect.TypeOf((*MockServiceCatalogAPI)(nil).UpdateTagOptionWithContext), varargs...)
}
